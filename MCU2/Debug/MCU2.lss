
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001986  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001986  00001a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  00001a22  2**0
                  ALLOC
  3 .stab         00001ad0  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d38  00000000  00000000  000034f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000422c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000436c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000044dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006125  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000081ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000897b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e8       	ldi	r30, 0x86	; 134
      78:	f9 e1       	ldi	r31, 0x19	; 25
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 22 09 	call	0x1244	; 0x1244 <main>
      8a:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EEPROM_init>:

#include "I2c.h"
#include "Eeprom.h"

void EEPROM_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
     b4e:	0e 94 48 08 	call	0x1090	; 0x1090 <TWI_init>
}
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <EEPROM_writeByte+0x6>
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <EEPROM_writeByte+0x8>
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	89 83       	std	Y+1, r24	; 0x01
     b68:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     b6a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TWI_start>
    if (TWI_getStatus() != TW_START)
     b6e:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_getStatus>
     b72:	88 30       	cpi	r24, 0x08	; 8
     b74:	11 f0       	breq	.+4      	; 0xb7a <EEPROM_writeByte+0x22>
        return ERROR;
     b76:	1c 82       	std	Y+4, r1	; 0x04
     b78:	28 c0       	rjmp	.+80     	; 0xbca <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	9a 81       	ldd	r25, Y+2	; 0x02
     b7e:	80 70       	andi	r24, 0x00	; 0
     b80:	97 70       	andi	r25, 0x07	; 7
     b82:	88 0f       	add	r24, r24
     b84:	89 2f       	mov	r24, r25
     b86:	88 1f       	adc	r24, r24
     b88:	99 0b       	sbc	r25, r25
     b8a:	91 95       	neg	r25
     b8c:	80 6a       	ori	r24, 0xA0	; 160
     b8e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     b92:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_getStatus>
     b96:	88 31       	cpi	r24, 0x18	; 24
     b98:	11 f0       	breq	.+4      	; 0xb9e <EEPROM_writeByte+0x46>
        return ERROR;
     b9a:	1c 82       	std	Y+4, r1	; 0x04
     b9c:	16 c0       	rjmp	.+44     	; 0xbca <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     ba4:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_getStatus>
     ba8:	88 32       	cpi	r24, 0x28	; 40
     baa:	11 f0       	breq	.+4      	; 0xbb0 <EEPROM_writeByte+0x58>
        return ERROR;
     bac:	1c 82       	std	Y+4, r1	; 0x04
     bae:	0d c0       	rjmp	.+26     	; 0xbca <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_write(u8data);
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     bb6:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_getStatus>
     bba:	88 32       	cpi	r24, 0x28	; 40
     bbc:	11 f0       	breq	.+4      	; 0xbc2 <EEPROM_writeByte+0x6a>
        return ERROR;
     bbe:	1c 82       	std	Y+4, r1	; 0x04
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     bc2:	0e 94 6d 08 	call	0x10da	; 0x10da <TWI_stop>

    return SUCCESS;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	8c 83       	std	Y+4, r24	; 0x04
     bca:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <EEPROM_readByte+0x6>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <EEPROM_readByte+0x8>
     be2:	0f 92       	push	r0
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	9a 83       	std	Y+2, r25	; 0x02
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	7c 83       	std	Y+4, r23	; 0x04
     bee:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     bf0:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TWI_start>
    if (TWI_getStatus() != TW_START)
     bf4:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_getStatus>
     bf8:	88 30       	cpi	r24, 0x08	; 8
     bfa:	11 f0       	breq	.+4      	; 0xc00 <EEPROM_readByte+0x26>
        return ERROR;
     bfc:	1d 82       	std	Y+5, r1	; 0x05
     bfe:	44 c0       	rjmp	.+136    	; 0xc88 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	80 70       	andi	r24, 0x00	; 0
     c06:	97 70       	andi	r25, 0x07	; 7
     c08:	88 0f       	add	r24, r24
     c0a:	89 2f       	mov	r24, r25
     c0c:	88 1f       	adc	r24, r24
     c0e:	99 0b       	sbc	r25, r25
     c10:	91 95       	neg	r25
     c12:	80 6a       	ori	r24, 0xA0	; 160
     c14:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c18:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_getStatus>
     c1c:	88 31       	cpi	r24, 0x18	; 24
     c1e:	11 f0       	breq	.+4      	; 0xc24 <EEPROM_readByte+0x4a>
        return ERROR;
     c20:	1d 82       	std	Y+5, r1	; 0x05
     c22:	32 c0       	rjmp	.+100    	; 0xc88 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     c2a:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_getStatus>
     c2e:	88 32       	cpi	r24, 0x28	; 40
     c30:	11 f0       	breq	.+4      	; 0xc36 <EEPROM_readByte+0x5c>
        return ERROR;
     c32:	1d 82       	std	Y+5, r1	; 0x05
     c34:	29 c0       	rjmp	.+82     	; 0xc88 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
     c36:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     c3a:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_getStatus>
     c3e:	80 31       	cpi	r24, 0x10	; 16
     c40:	11 f0       	breq	.+4      	; 0xc46 <EEPROM_readByte+0x6c>
        return ERROR;
     c42:	1d 82       	std	Y+5, r1	; 0x05
     c44:	21 c0       	rjmp	.+66     	; 0xc88 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	80 70       	andi	r24, 0x00	; 0
     c4c:	97 70       	andi	r25, 0x07	; 7
     c4e:	88 0f       	add	r24, r24
     c50:	89 2f       	mov	r24, r25
     c52:	88 1f       	adc	r24, r24
     c54:	99 0b       	sbc	r25, r25
     c56:	91 95       	neg	r25
     c58:	81 6a       	ori	r24, 0xA1	; 161
     c5a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     c5e:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_getStatus>
     c62:	80 34       	cpi	r24, 0x40	; 64
     c64:	11 f0       	breq	.+4      	; 0xc6a <EEPROM_readByte+0x90>
        return ERROR;
     c66:	1d 82       	std	Y+5, r1	; 0x05
     c68:	0f c0       	rjmp	.+30     	; 0xc88 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     c6a:	0e 94 a5 08 	call	0x114a	; 0x114a <TWI_readWithNACK>
     c6e:	eb 81       	ldd	r30, Y+3	; 0x03
     c70:	fc 81       	ldd	r31, Y+4	; 0x04
     c72:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     c74:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_getStatus>
     c78:	88 35       	cpi	r24, 0x58	; 88
     c7a:	11 f0       	breq	.+4      	; 0xc80 <EEPROM_readByte+0xa6>
        return ERROR;
     c7c:	1d 82       	std	Y+5, r1	; 0x05
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     c80:	0e 94 6d 08 	call	0x10da	; 0x10da <TWI_stop>
    return SUCCESS;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8d 83       	std	Y+5, r24	; 0x05
     c88:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <motoropen>:
 *      Author: rahma
 */

#include "Functions.h"
uint8 second=0;
void motoropen(){
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	2e 97       	sbiw	r28, 0x0e	; 14
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
	    DDRB |= 0x03; //output pins PB0, PB1
     cae:	a7 e3       	ldi	r26, 0x37	; 55
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e7 e3       	ldi	r30, 0x37	; 55
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	83 60       	ori	r24, 0x03	; 3
     cba:	8c 93       	st	X, r24
		PORTB |= (1<<PB1);
     cbc:	a8 e3       	ldi	r26, 0x38	; 56
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e8 e3       	ldi	r30, 0x38	; 56
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	82 60       	ori	r24, 0x02	; 2
     cc8:	8c 93       	st	X, r24
		PORTB &= (~(1<<PB0));
     cca:	a8 e3       	ldi	r26, 0x38	; 56
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e8 e3       	ldi	r30, 0x38	; 56
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	8e 7f       	andi	r24, 0xFE	; 254
     cd6:	8c 93       	st	X, r24
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	aa e7       	ldi	r26, 0x7A	; 122
     cde:	b4 e4       	ldi	r27, 0x44	; 68
     ce0:	8b 87       	std	Y+11, r24	; 0x0b
     ce2:	9c 87       	std	Y+12, r25	; 0x0c
     ce4:	ad 87       	std	Y+13, r26	; 0x0d
     ce6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce8:	6b 85       	ldd	r22, Y+11	; 0x0b
     cea:	7c 85       	ldd	r23, Y+12	; 0x0c
     cec:	8d 85       	ldd	r24, Y+13	; 0x0d
     cee:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	4a e7       	ldi	r20, 0x7A	; 122
     cf6:	53 e4       	ldi	r21, 0x43	; 67
     cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	8f 83       	std	Y+7, r24	; 0x07
     d02:	98 87       	std	Y+8, r25	; 0x08
     d04:	a9 87       	std	Y+9, r26	; 0x09
     d06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d08:	6f 81       	ldd	r22, Y+7	; 0x07
     d0a:	78 85       	ldd	r23, Y+8	; 0x08
     d0c:	89 85       	ldd	r24, Y+9	; 0x09
     d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e8       	ldi	r20, 0x80	; 128
     d16:	5f e3       	ldi	r21, 0x3F	; 63
     d18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d1c:	88 23       	and	r24, r24
     d1e:	2c f4       	brge	.+10     	; 0xd2a <motoropen+0x90>
		__ticks = 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	9e 83       	std	Y+6, r25	; 0x06
     d26:	8d 83       	std	Y+5, r24	; 0x05
     d28:	3f c0       	rjmp	.+126    	; 0xda8 <motoropen+0x10e>
	else if (__tmp > 65535)
     d2a:	6f 81       	ldd	r22, Y+7	; 0x07
     d2c:	78 85       	ldd	r23, Y+8	; 0x08
     d2e:	89 85       	ldd	r24, Y+9	; 0x09
     d30:	9a 85       	ldd	r25, Y+10	; 0x0a
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	3f ef       	ldi	r19, 0xFF	; 255
     d36:	4f e7       	ldi	r20, 0x7F	; 127
     d38:	57 e4       	ldi	r21, 0x47	; 71
     d3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d3e:	18 16       	cp	r1, r24
     d40:	4c f5       	brge	.+82     	; 0xd94 <motoropen+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d42:	6b 85       	ldd	r22, Y+11	; 0x0b
     d44:	7c 85       	ldd	r23, Y+12	; 0x0c
     d46:	8d 85       	ldd	r24, Y+13	; 0x0d
     d48:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e2       	ldi	r20, 0x20	; 32
     d50:	51 e4       	ldi	r21, 0x41	; 65
     d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	9e 83       	std	Y+6, r25	; 0x06
     d68:	8d 83       	std	Y+5, r24	; 0x05
     d6a:	0f c0       	rjmp	.+30     	; 0xd8a <motoropen+0xf0>
     d6c:	89 e1       	ldi	r24, 0x19	; 25
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	9c 83       	std	Y+4, r25	; 0x04
     d72:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	9c 81       	ldd	r25, Y+4	; 0x04
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <motoropen+0xde>
     d7c:	9c 83       	std	Y+4, r25	; 0x04
     d7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	9e 83       	std	Y+6, r25	; 0x06
     d88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8a:	8d 81       	ldd	r24, Y+5	; 0x05
     d8c:	9e 81       	ldd	r25, Y+6	; 0x06
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	69 f7       	brne	.-38     	; 0xd6c <motoropen+0xd2>
     d92:	14 c0       	rjmp	.+40     	; 0xdbc <motoropen+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d94:	6f 81       	ldd	r22, Y+7	; 0x07
     d96:	78 85       	ldd	r23, Y+8	; 0x08
     d98:	89 85       	ldd	r24, Y+9	; 0x09
     d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	8d 83       	std	Y+5, r24	; 0x05
     da8:	8d 81       	ldd	r24, Y+5	; 0x05
     daa:	9e 81       	ldd	r25, Y+6	; 0x06
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <motoropen+0x11a>
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
		// Rotate the motor --> clock wise
		_delay_ms(1000);
}
     dbc:	2e 96       	adiw	r28, 0x0e	; 14
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <motorclose>:
void motorclose(){
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	2e 97       	sbiw	r28, 0x0e	; 14
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
	DDRB |= 0x03;
     de2:	a7 e3       	ldi	r26, 0x37	; 55
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e7 e3       	ldi	r30, 0x37	; 55
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	83 60       	ori	r24, 0x03	; 3
     dee:	8c 93       	st	X, r24
	PORTB &= ~(1<<PB1);
     df0:	a8 e3       	ldi	r26, 0x38	; 56
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e8 e3       	ldi	r30, 0x38	; 56
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8d 7f       	andi	r24, 0xFD	; 253
     dfc:	8c 93       	st	X, r24
	PORTB |= (1<<PB0);
     dfe:	a8 e3       	ldi	r26, 0x38	; 56
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e8 e3       	ldi	r30, 0x38	; 56
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	81 60       	ori	r24, 0x01	; 1
     e0a:	8c 93       	st	X, r24
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	aa e7       	ldi	r26, 0x7A	; 122
     e12:	b4 e4       	ldi	r27, 0x44	; 68
     e14:	8b 87       	std	Y+11, r24	; 0x0b
     e16:	9c 87       	std	Y+12, r25	; 0x0c
     e18:	ad 87       	std	Y+13, r26	; 0x0d
     e1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e20:	8d 85       	ldd	r24, Y+13	; 0x0d
     e22:	9e 85       	ldd	r25, Y+14	; 0x0e
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	4a e7       	ldi	r20, 0x7A	; 122
     e2a:	53 e4       	ldi	r21, 0x43	; 67
     e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	8f 83       	std	Y+7, r24	; 0x07
     e36:	98 87       	std	Y+8, r25	; 0x08
     e38:	a9 87       	std	Y+9, r26	; 0x09
     e3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e3c:	6f 81       	ldd	r22, Y+7	; 0x07
     e3e:	78 85       	ldd	r23, Y+8	; 0x08
     e40:	89 85       	ldd	r24, Y+9	; 0x09
     e42:	9a 85       	ldd	r25, Y+10	; 0x0a
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e8       	ldi	r20, 0x80	; 128
     e4a:	5f e3       	ldi	r21, 0x3F	; 63
     e4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e50:	88 23       	and	r24, r24
     e52:	2c f4       	brge	.+10     	; 0xe5e <motorclose+0x90>
		__ticks = 1;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	9e 83       	std	Y+6, r25	; 0x06
     e5a:	8d 83       	std	Y+5, r24	; 0x05
     e5c:	3f c0       	rjmp	.+126    	; 0xedc <motorclose+0x10e>
	else if (__tmp > 65535)
     e5e:	6f 81       	ldd	r22, Y+7	; 0x07
     e60:	78 85       	ldd	r23, Y+8	; 0x08
     e62:	89 85       	ldd	r24, Y+9	; 0x09
     e64:	9a 85       	ldd	r25, Y+10	; 0x0a
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	3f ef       	ldi	r19, 0xFF	; 255
     e6a:	4f e7       	ldi	r20, 0x7F	; 127
     e6c:	57 e4       	ldi	r21, 0x47	; 71
     e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e72:	18 16       	cp	r1, r24
     e74:	4c f5       	brge	.+82     	; 0xec8 <motorclose+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e76:	6b 85       	ldd	r22, Y+11	; 0x0b
     e78:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e2       	ldi	r20, 0x20	; 32
     e84:	51 e4       	ldi	r21, 0x41	; 65
     e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	bc 01       	movw	r22, r24
     e90:	cd 01       	movw	r24, r26
     e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	9e 83       	std	Y+6, r25	; 0x06
     e9c:	8d 83       	std	Y+5, r24	; 0x05
     e9e:	0f c0       	rjmp	.+30     	; 0xebe <motorclose+0xf0>
     ea0:	89 e1       	ldi	r24, 0x19	; 25
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	9c 81       	ldd	r25, Y+4	; 0x04
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <motorclose+0xde>
     eb0:	9c 83       	std	Y+4, r25	; 0x04
     eb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	9e 81       	ldd	r25, Y+6	; 0x06
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	9e 83       	std	Y+6, r25	; 0x06
     ebc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	9e 81       	ldd	r25, Y+6	; 0x06
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	69 f7       	brne	.-38     	; 0xea0 <motorclose+0xd2>
     ec6:	14 c0       	rjmp	.+40     	; 0xef0 <motorclose+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec8:	6f 81       	ldd	r22, Y+7	; 0x07
     eca:	78 85       	ldd	r23, Y+8	; 0x08
     ecc:	89 85       	ldd	r24, Y+9	; 0x09
     ece:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	8d 83       	std	Y+5, r24	; 0x05
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	f1 f7       	brne	.-4      	; 0xee8 <motorclose+0x11a>
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     ef0:	2e 96       	adiw	r28, 0x0e	; 14
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <recieve_write>:
void recieve_write(enum READY R){
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	a0 97       	sbiw	r28, 0x20	; 32
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	88 a3       	std	Y+32, r24	; 0x20

	int i , arr [7];
	uint8 recieve = UART_recieveByte();
     f1c:	0e 94 0d 0c 	call	0x181a	; 0x181a <UART_recieveByte>
     f20:	8f 87       	std	Y+15, r24	; 0x0f
	while (recieve != R);
     f22:	9f 85       	ldd	r25, Y+15	; 0x0f
     f24:	88 a1       	ldd	r24, Y+32	; 0x20
     f26:	98 17       	cp	r25, r24
     f28:	e1 f7       	brne	.-8      	; 0xf22 <recieve_write+0x20>
	for (i=0;i<5;i++){
     f2a:	19 8a       	std	Y+17, r1	; 0x11
     f2c:	18 8a       	std	Y+16, r1	; 0x10
     f2e:	9f c0       	rjmp	.+318    	; 0x106e <recieve_write+0x16c>
		UART_sendByte(R);
     f30:	88 a1       	ldd	r24, Y+32	; 0x20
     f32:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <UART_sendByte>
		arr[i]=UART_recieveByte();
     f36:	08 89       	ldd	r16, Y+16	; 0x10
     f38:	19 89       	ldd	r17, Y+17	; 0x11
     f3a:	0e 94 0d 0c 	call	0x181a	; 0x181a <UART_recieveByte>
     f3e:	48 2f       	mov	r20, r24
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	98 01       	movw	r18, r16
     f44:	22 0f       	add	r18, r18
     f46:	33 1f       	adc	r19, r19
     f48:	ce 01       	movw	r24, r28
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	82 0f       	add	r24, r18
     f4e:	93 1f       	adc	r25, r19
     f50:	fc 01       	movw	r30, r24
     f52:	71 96       	adiw	r30, 0x11	; 17
     f54:	51 83       	std	Z+1, r21	; 0x01
     f56:	40 83       	st	Z, r20
		EEPROM_writeByte((0x000|i),arr[i]);
     f58:	48 89       	ldd	r20, Y+16	; 0x10
     f5a:	59 89       	ldd	r21, Y+17	; 0x11
     f5c:	88 89       	ldd	r24, Y+16	; 0x10
     f5e:	99 89       	ldd	r25, Y+17	; 0x11
     f60:	9c 01       	movw	r18, r24
     f62:	22 0f       	add	r18, r18
     f64:	33 1f       	adc	r19, r19
     f66:	ce 01       	movw	r24, r28
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	82 0f       	add	r24, r18
     f6c:	93 1f       	adc	r25, r19
     f6e:	fc 01       	movw	r30, r24
     f70:	71 96       	adiw	r30, 0x11	; 17
     f72:	80 81       	ld	r24, Z
     f74:	91 81       	ldd	r25, Z+1	; 0x01
     f76:	28 2f       	mov	r18, r24
     f78:	ca 01       	movw	r24, r20
     f7a:	62 2f       	mov	r22, r18
     f7c:	0e 94 ac 05 	call	0xb58	; 0xb58 <EEPROM_writeByte>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a8 ec       	ldi	r26, 0xC8	; 200
     f86:	b2 e4       	ldi	r27, 0x42	; 66
     f88:	8b 87       	std	Y+11, r24	; 0x0b
     f8a:	9c 87       	std	Y+12, r25	; 0x0c
     f8c:	ad 87       	std	Y+13, r26	; 0x0d
     f8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f90:	6b 85       	ldd	r22, Y+11	; 0x0b
     f92:	7c 85       	ldd	r23, Y+12	; 0x0c
     f94:	8d 85       	ldd	r24, Y+13	; 0x0d
     f96:	9e 85       	ldd	r25, Y+14	; 0x0e
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	4a e7       	ldi	r20, 0x7A	; 122
     f9e:	53 e4       	ldi	r21, 0x43	; 67
     fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	8f 83       	std	Y+7, r24	; 0x07
     faa:	98 87       	std	Y+8, r25	; 0x08
     fac:	a9 87       	std	Y+9, r26	; 0x09
     fae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fb0:	6f 81       	ldd	r22, Y+7	; 0x07
     fb2:	78 85       	ldd	r23, Y+8	; 0x08
     fb4:	89 85       	ldd	r24, Y+9	; 0x09
     fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e8       	ldi	r20, 0x80	; 128
     fbe:	5f e3       	ldi	r21, 0x3F	; 63
     fc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fc4:	88 23       	and	r24, r24
     fc6:	2c f4       	brge	.+10     	; 0xfd2 <recieve_write+0xd0>
		__ticks = 1;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	9e 83       	std	Y+6, r25	; 0x06
     fce:	8d 83       	std	Y+5, r24	; 0x05
     fd0:	3f c0       	rjmp	.+126    	; 0x1050 <recieve_write+0x14e>
	else if (__tmp > 65535)
     fd2:	6f 81       	ldd	r22, Y+7	; 0x07
     fd4:	78 85       	ldd	r23, Y+8	; 0x08
     fd6:	89 85       	ldd	r24, Y+9	; 0x09
     fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	3f ef       	ldi	r19, 0xFF	; 255
     fde:	4f e7       	ldi	r20, 0x7F	; 127
     fe0:	57 e4       	ldi	r21, 0x47	; 71
     fe2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe6:	18 16       	cp	r1, r24
     fe8:	4c f5       	brge	.+82     	; 0x103c <recieve_write+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fea:	6b 85       	ldd	r22, Y+11	; 0x0b
     fec:	7c 85       	ldd	r23, Y+12	; 0x0c
     fee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e2       	ldi	r20, 0x20	; 32
     ff8:	51 e4       	ldi	r21, 0x41	; 65
     ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
    1012:	0f c0       	rjmp	.+30     	; 0x1032 <recieve_write+0x130>
    1014:	89 e1       	ldi	r24, 0x19	; 25
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9c 83       	std	Y+4, r25	; 0x04
    101a:	8b 83       	std	Y+3, r24	; 0x03
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <recieve_write+0x11e>
    1024:	9c 83       	std	Y+4, r25	; 0x04
    1026:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	9e 81       	ldd	r25, Y+6	; 0x06
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	69 f7       	brne	.-38     	; 0x1014 <recieve_write+0x112>
    103a:	14 c0       	rjmp	.+40     	; 0x1064 <recieve_write+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103c:	6f 81       	ldd	r22, Y+7	; 0x07
    103e:	78 85       	ldd	r23, Y+8	; 0x08
    1040:	89 85       	ldd	r24, Y+9	; 0x09
    1042:	9a 85       	ldd	r25, Y+10	; 0x0a
    1044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	9e 83       	std	Y+6, r25	; 0x06
    104e:	8d 83       	std	Y+5, r24	; 0x05
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	9e 81       	ldd	r25, Y+6	; 0x06
    1054:	9a 83       	std	Y+2, r25	; 0x02
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <recieve_write+0x15a>
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	89 83       	std	Y+1, r24	; 0x01
void recieve_write(enum READY R){

	int i , arr [7];
	uint8 recieve = UART_recieveByte();
	while (recieve != R);
	for (i=0;i<5;i++){
    1064:	88 89       	ldd	r24, Y+16	; 0x10
    1066:	99 89       	ldd	r25, Y+17	; 0x11
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	99 8b       	std	Y+17, r25	; 0x11
    106c:	88 8b       	std	Y+16, r24	; 0x10
    106e:	88 89       	ldd	r24, Y+16	; 0x10
    1070:	99 89       	ldd	r25, Y+17	; 0x11
    1072:	85 30       	cpi	r24, 0x05	; 5
    1074:	91 05       	cpc	r25, r1
    1076:	0c f4       	brge	.+2      	; 0x107a <recieve_write+0x178>
    1078:	5b cf       	rjmp	.-330    	; 0xf30 <recieve_write+0x2e>
		UART_sendByte(R);
		arr[i]=UART_recieveByte();
		EEPROM_writeByte((0x000|i),arr[i]);
				_delay_ms(100);
	}
}
    107a:	a0 96       	adiw	r28, 0x20	; 32
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	08 95       	ret

00001090 <TWI_init>:
 *
 *  Created on: Jul 28, 2021
 *      Author: rahma
 */
#include "I2c.h"
void TWI_init(void){
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
	 TWCR = (1<<TWEN);
    1098:	e6 e5       	ldi	r30, 0x56	; 86
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	84 e0       	ldi	r24, 0x04	; 4
    109e:	80 83       	st	Z, r24
	 /* Bit Rate: 62.000 kbps using zero pre-scaler TWPS=00 and F_CPU=1Mhz */
	    TWBR =  0x02;
    10a0:	e0 e2       	ldi	r30, 0x20	; 32
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	80 83       	st	Z, r24
	 	TWSR = 0x00;
    10a8:	e1 e2       	ldi	r30, 0x21	; 33
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	10 82       	st	Z, r1
}
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <TWI_start>:
 void TWI_start(void){
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
	/*TWINT Bit is flag that is set when TWI finishes its current job so it must be cleared by setting
	 * one to it and TWSTA is Start bit , TWEN is TWI Enable
	 */
	TWCR|=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    10bc:	a6 e5       	ldi	r26, 0x56	; 86
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e6 e5       	ldi	r30, 0x56	; 86
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	84 6a       	ori	r24, 0xA4	; 164
    10c8:	8c 93       	st	X, r24
	while (BIT_IS_CLEAR(TWCR,TWINT));
    10ca:	e6 e5       	ldi	r30, 0x56	; 86
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	88 23       	and	r24, r24
    10d2:	dc f7       	brge	.-10     	; 0x10ca <TWI_start+0x16>
	//wait until TWI start successfully by setting 1 to TWINT

}
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <TWI_stop>:
void TWI_stop(void){
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
	TWCR|=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    10e2:	a6 e5       	ldi	r26, 0x56	; 86
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e6 e5       	ldi	r30, 0x56	; 86
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	84 69       	ori	r24, 0x94	; 148
    10ee:	8c 93       	st	X, r24
	/* TWINT Must be cleared before sending stop bit
	 * Stop bit TWSTO is set
	 * TWEN TWI Enable bit
	 */
}
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <TWI_write>:
void TWI_write(uint8 data){
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	0f 92       	push	r0
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;
    1102:	e3 e2       	ldi	r30, 0x23	; 35
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	80 83       	st	Z, r24
	 TWCR = (1 << TWINT) | (1 << TWEN);
    110a:	e6 e5       	ldi	r30, 0x56	; 86
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	84 e8       	ldi	r24, 0x84	; 132
    1110:	80 83       	st	Z, r24
	 //wait until TWI start successfully by setting 1 to TWINT
	  while(BIT_IS_CLEAR(TWCR,TWINT));
    1112:	e6 e5       	ldi	r30, 0x56	; 86
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	88 23       	and	r24, r24
    111a:	dc f7       	brge	.-10     	; 0x1112 <TWI_write+0x1c>
}
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <TWI_readWithACK>:
uint8 TWI_readWithACK(void){
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
	//after reading or recieving enable sending ack TWEA =1
	// Clear TWINT before recieving
	// Enable TWI
	TWCR = (1 << TWINT) | (1 << TWEN)|(1<<TWEA);
    112c:	e6 e5       	ldi	r30, 0x56	; 86
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	84 ec       	ldi	r24, 0xC4	; 196
    1132:	80 83       	st	Z, r24

     //wait until TWI start successfully by setting 1 to TWINT
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1134:	e6 e5       	ldi	r30, 0x56	; 86
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	88 23       	and	r24, r24
    113c:	dc f7       	brge	.-10     	; 0x1134 <TWI_readWithACK+0x10>
	return TWDR;
    113e:	e3 e2       	ldi	r30, 0x23	; 35
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
}
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <TWI_readWithNACK>:
uint8 TWI_readWithNACK(void){
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62

		// Clear TWINT before recieving
		// Enable TWI
		TWCR = (1 << TWINT) | (1 << TWEN);
    1152:	e6 e5       	ldi	r30, 0x56	; 86
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	84 e8       	ldi	r24, 0x84	; 132
    1158:	80 83       	st	Z, r24

	     //wait until TWI start successfully by setting 1 to TWINT
		while(BIT_IS_CLEAR(TWCR,TWINT));
    115a:	e6 e5       	ldi	r30, 0x56	; 86
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	88 23       	and	r24, r24
    1162:	dc f7       	brge	.-10     	; 0x115a <TWI_readWithNACK+0x10>
		return TWDR;
    1164:	e3 e2       	ldi	r30, 0x23	; 35
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
}
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <TWI_getStatus>:
uint8 TWI_getStatus(void)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	0f 92       	push	r0
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    117a:	e1 e2       	ldi	r30, 0x21	; 33
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	88 7f       	andi	r24, 0xF8	; 248
    1182:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
}
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <timer0_init_normal_mode>:
 */

#include "Timer0.h"
extern volatile uint8 second;
#if Mode == NORMAL_MODE
void timer0_init_normal_mode(uint8 prescaler , uint8 initial ){
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	00 d0       	rcall	.+0      	; 0x1194 <timer0_init_normal_mode+0x6>
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	6a 83       	std	Y+2, r22	; 0x02
      intial :the value that the timer will start count from,
			it varies from 0 to 255.

	 */

	second=0;
    119c:	10 92 68 00 	sts	0x0068, r1
	SREG  |= (1<<7);    // global interrupt bit.
    11a0:	af e5       	ldi	r26, 0x5F	; 95
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	ef e5       	ldi	r30, 0x5F	; 95
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	80 68       	ori	r24, 0x80	; 128
    11ac:	8c 93       	st	X, r24
	TCNT0 = initial;  // the value that the timer will start count from.
    11ae:	e2 e5       	ldi	r30, 0x52	; 82
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	80 83       	st	Z, r24
	TIMSK |= (1<<TOIE0);    // interrupt enable bit for Timer0 in normal mode.
    11b6:	a9 e5       	ldi	r26, 0x59	; 89
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e9 e5       	ldi	r30, 0x59	; 89
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	81 60       	ori	r24, 0x01	; 1
    11c2:	8c 93       	st	X, r24
	TCCR0 = (1<<FOC0);    // this bit is set to one for any non-PWM mode.
    11c4:	e3 e5       	ldi	r30, 0x53	; 83
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 e8       	ldi	r24, 0x80	; 128
    11ca:	80 83       	st	Z, r24
	TCCR0 = (TCCR0 & 0xF8) | (prescaler & 0x07);  // Prescaler.
    11cc:	a3 e5       	ldi	r26, 0x53	; 83
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e3 e5       	ldi	r30, 0x53	; 83
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	98 2f       	mov	r25, r24
    11d8:	98 7f       	andi	r25, 0xF8	; 248
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	87 70       	andi	r24, 0x07	; 7
    11de:	89 2b       	or	r24, r25
    11e0:	8c 93       	st	X, r24
}
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <timer0_deinit>:
			TCCR0 = (TCCR0 & 0xF8) | (prescaler & 0x07) |(mode & 0x30);  // Prescaler and compare output mode non pwm

		}

#endif
void timer0_deinit(void){
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * This function is set to Deinit(stop) Time0.
	 */
	TCCR0 = 0;
    11f4:	e3 e5       	ldi	r30, 0x53	; 83
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	10 82       	st	Z, r1
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <__vector_9>:
 * so we need timer to overflow 4 times to get a 1 second
 * This is the ISR of timer0 overflow mode
 */

ISR(TIMER0_OVF_vect)
{
    1200:	1f 92       	push	r1
    1202:	0f 92       	push	r0
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	0f 92       	push	r0
    1208:	11 24       	eor	r1, r1
    120a:	8f 93       	push	r24
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1214:	80 91 69 00 	lds	r24, 0x0069
    1218:	8f 5f       	subi	r24, 0xFF	; 255
    121a:	80 93 69 00 	sts	0x0069, r24
	if (g_tick == overflow_num)
    121e:	80 91 69 00 	lds	r24, 0x0069
    1222:	84 30       	cpi	r24, 0x04	; 4
    1224:	39 f4       	brne	.+14     	; 0x1234 <__vector_9+0x34>
	{
		second++;
    1226:	80 91 68 00 	lds	r24, 0x0068
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	80 93 68 00 	sts	0x0068, r24
		g_tick = 0;
    1230:	10 92 69 00 	sts	0x0069, r1
	}
}
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	8f 91       	pop	r24
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	0f 90       	pop	r0
    1240:	1f 90       	pop	r1
    1242:	18 95       	reti

00001244 <main>:




int main(){
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	c2 54       	subi	r28, 0x42	; 66
    1252:	d0 40       	sbci	r29, 0x00	; 0
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
UART_init();
    125e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <UART_init>
EEPROM_init();
    1262:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_init>
uint8 i, arr[7];
recieve_write(READY1);
    1266:	8a e0       	ldi	r24, 0x0A	; 10
    1268:	0e 94 81 07 	call	0xf02	; 0xf02 <recieve_write>
while (1){
	uint8 recieve = UART_recieveByte();
    126c:	0e 94 0d 0c 	call	0x181a	; 0x181a <UART_recieveByte>
    1270:	8a af       	std	Y+58, r24	; 0x3a
	if (recieve ==READY2){
    1272:	8a ad       	ldd	r24, Y+58	; 0x3a
    1274:	84 31       	cpi	r24, 0x14	; 20
    1276:	09 f0       	breq	.+2      	; 0x127a <main+0x36>
    1278:	a2 c0       	rjmp	.+324    	; 0x13be <main+0x17a>
		while (recieve !=READY2);
    127a:	8a ad       	ldd	r24, Y+58	; 0x3a
    127c:	84 31       	cpi	r24, 0x14	; 20
    127e:	e9 f7       	brne	.-6      	; 0x127a <main+0x36>
		for(i=0;i<5;i++){
    1280:	1b ae       	std	Y+59, r1	; 0x3b
    1282:	92 c0       	rjmp	.+292    	; 0x13a8 <main+0x164>
			UART_sendByte(READY2);
    1284:	84 e1       	ldi	r24, 0x14	; 20
    1286:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <UART_sendByte>
			EEPROM_readByte((0x000|i),&arr[i]);
    128a:	8b ad       	ldd	r24, Y+59	; 0x3b
    128c:	48 2f       	mov	r20, r24
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	8b ad       	ldd	r24, Y+59	; 0x3b
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	9e 01       	movw	r18, r28
    1298:	24 5c       	subi	r18, 0xC4	; 196
    129a:	3f 4f       	sbci	r19, 0xFF	; 255
    129c:	28 0f       	add	r18, r24
    129e:	39 1f       	adc	r19, r25
    12a0:	ca 01       	movw	r24, r20
    12a2:	b9 01       	movw	r22, r18
    12a4:	0e 94 ed 05 	call	0xbda	; 0xbda <EEPROM_readByte>
			 UART_sendByte(arr[i]);
    12a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	ce 01       	movw	r24, r28
    12b0:	cc 96       	adiw	r24, 0x3c	; 60
    12b2:	fc 01       	movw	r30, r24
    12b4:	e2 0f       	add	r30, r18
    12b6:	f3 1f       	adc	r31, r19
    12b8:	80 81       	ld	r24, Z
    12ba:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <UART_sendByte>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	a8 ec       	ldi	r26, 0xC8	; 200
    12c4:	b2 e4       	ldi	r27, 0x42	; 66
    12c6:	8d ab       	std	Y+53, r24	; 0x35
    12c8:	9e ab       	std	Y+54, r25	; 0x36
    12ca:	af ab       	std	Y+55, r26	; 0x37
    12cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ce:	6d a9       	ldd	r22, Y+53	; 0x35
    12d0:	7e a9       	ldd	r23, Y+54	; 0x36
    12d2:	8f a9       	ldd	r24, Y+55	; 0x37
    12d4:	98 ad       	ldd	r25, Y+56	; 0x38
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	4a e7       	ldi	r20, 0x7A	; 122
    12dc:	53 e4       	ldi	r21, 0x43	; 67
    12de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	89 ab       	std	Y+49, r24	; 0x31
    12e8:	9a ab       	std	Y+50, r25	; 0x32
    12ea:	ab ab       	std	Y+51, r26	; 0x33
    12ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12ee:	69 a9       	ldd	r22, Y+49	; 0x31
    12f0:	7a a9       	ldd	r23, Y+50	; 0x32
    12f2:	8b a9       	ldd	r24, Y+51	; 0x33
    12f4:	9c a9       	ldd	r25, Y+52	; 0x34
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e8       	ldi	r20, 0x80	; 128
    12fc:	5f e3       	ldi	r21, 0x3F	; 63
    12fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1302:	88 23       	and	r24, r24
    1304:	2c f4       	brge	.+10     	; 0x1310 <main+0xcc>
		__ticks = 1;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	98 ab       	std	Y+48, r25	; 0x30
    130c:	8f a7       	std	Y+47, r24	; 0x2f
    130e:	3f c0       	rjmp	.+126    	; 0x138e <main+0x14a>
	else if (__tmp > 65535)
    1310:	69 a9       	ldd	r22, Y+49	; 0x31
    1312:	7a a9       	ldd	r23, Y+50	; 0x32
    1314:	8b a9       	ldd	r24, Y+51	; 0x33
    1316:	9c a9       	ldd	r25, Y+52	; 0x34
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	3f ef       	ldi	r19, 0xFF	; 255
    131c:	4f e7       	ldi	r20, 0x7F	; 127
    131e:	57 e4       	ldi	r21, 0x47	; 71
    1320:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1324:	18 16       	cp	r1, r24
    1326:	4c f5       	brge	.+82     	; 0x137a <main+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1328:	6d a9       	ldd	r22, Y+53	; 0x35
    132a:	7e a9       	ldd	r23, Y+54	; 0x36
    132c:	8f a9       	ldd	r24, Y+55	; 0x37
    132e:	98 ad       	ldd	r25, Y+56	; 0x38
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e2       	ldi	r20, 0x20	; 32
    1336:	51 e4       	ldi	r21, 0x41	; 65
    1338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	bc 01       	movw	r22, r24
    1342:	cd 01       	movw	r24, r26
    1344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	98 ab       	std	Y+48, r25	; 0x30
    134e:	8f a7       	std	Y+47, r24	; 0x2f
    1350:	0f c0       	rjmp	.+30     	; 0x1370 <main+0x12c>
    1352:	89 e1       	ldi	r24, 0x19	; 25
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9e a7       	std	Y+46, r25	; 0x2e
    1358:	8d a7       	std	Y+45, r24	; 0x2d
    135a:	8d a5       	ldd	r24, Y+45	; 0x2d
    135c:	9e a5       	ldd	r25, Y+46	; 0x2e
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	f1 f7       	brne	.-4      	; 0x135e <main+0x11a>
    1362:	9e a7       	std	Y+46, r25	; 0x2e
    1364:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1366:	8f a5       	ldd	r24, Y+47	; 0x2f
    1368:	98 a9       	ldd	r25, Y+48	; 0x30
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	98 ab       	std	Y+48, r25	; 0x30
    136e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1370:	8f a5       	ldd	r24, Y+47	; 0x2f
    1372:	98 a9       	ldd	r25, Y+48	; 0x30
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	69 f7       	brne	.-38     	; 0x1352 <main+0x10e>
    1378:	14 c0       	rjmp	.+40     	; 0x13a2 <main+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137a:	69 a9       	ldd	r22, Y+49	; 0x31
    137c:	7a a9       	ldd	r23, Y+50	; 0x32
    137e:	8b a9       	ldd	r24, Y+51	; 0x33
    1380:	9c a9       	ldd	r25, Y+52	; 0x34
    1382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	98 ab       	std	Y+48, r25	; 0x30
    138c:	8f a7       	std	Y+47, r24	; 0x2f
    138e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1390:	98 a9       	ldd	r25, Y+48	; 0x30
    1392:	9c a7       	std	Y+44, r25	; 0x2c
    1394:	8b a7       	std	Y+43, r24	; 0x2b
    1396:	8b a5       	ldd	r24, Y+43	; 0x2b
    1398:	9c a5       	ldd	r25, Y+44	; 0x2c
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	f1 f7       	brne	.-4      	; 0x139a <main+0x156>
    139e:	9c a7       	std	Y+44, r25	; 0x2c
    13a0:	8b a7       	std	Y+43, r24	; 0x2b
recieve_write(READY1);
while (1){
	uint8 recieve = UART_recieveByte();
	if (recieve ==READY2){
		while (recieve !=READY2);
		for(i=0;i<5;i++){
    13a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	8b af       	std	Y+59, r24	; 0x3b
    13a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    13aa:	85 30       	cpi	r24, 0x05	; 5
    13ac:	08 f4       	brcc	.+2      	; 0x13b0 <main+0x16c>
    13ae:	6a cf       	rjmp	.-300    	; 0x1284 <main+0x40>
			EEPROM_readByte((0x000|i),&arr[i]);
			 UART_sendByte(arr[i]);
			_delay_ms(100);

		}
		recieve_write (READY3);
    13b0:	8e e1       	ldi	r24, 0x1E	; 30
    13b2:	0e 94 81 07 	call	0xf02	; 0xf02 <recieve_write>
		recieve_write (READY1);
    13b6:	8a e0       	ldi	r24, 0x0A	; 10
    13b8:	0e 94 81 07 	call	0xf02	; 0xf02 <recieve_write>
    13bc:	57 cf       	rjmp	.-338    	; 0x126c <main+0x28>
	}
	else if (recieve== READY6){
    13be:	8a ad       	ldd	r24, Y+58	; 0x3a
    13c0:	8c 33       	cpi	r24, 0x3C	; 60
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <main+0x182>
    13c4:	53 cf       	rjmp	.-346    	; 0x126c <main+0x28>
	while (recieve !=READY6);
    13c6:	8a ad       	ldd	r24, Y+58	; 0x3a
    13c8:	8c 33       	cpi	r24, 0x3C	; 60
    13ca:	e9 f7       	brne	.-6      	; 0x13c6 <main+0x182>
	for (i=0; i<5 ;i++){
    13cc:	1b ae       	std	Y+59, r1	; 0x3b
    13ce:	92 c0       	rjmp	.+292    	; 0x14f4 <main+0x2b0>
		UART_sendByte (READY6);
    13d0:	8c e3       	ldi	r24, 0x3C	; 60
    13d2:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <UART_sendByte>
		EEPROM_readByte((0x000|i),&arr[i]);
    13d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    13d8:	48 2f       	mov	r20, r24
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9e 01       	movw	r18, r28
    13e4:	24 5c       	subi	r18, 0xC4	; 196
    13e6:	3f 4f       	sbci	r19, 0xFF	; 255
    13e8:	28 0f       	add	r18, r24
    13ea:	39 1f       	adc	r19, r25
    13ec:	ca 01       	movw	r24, r20
    13ee:	b9 01       	movw	r22, r18
    13f0:	0e 94 ed 05 	call	0xbda	; 0xbda <EEPROM_readByte>
		 UART_sendByte(arr[i]);
    13f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	ce 01       	movw	r24, r28
    13fc:	cc 96       	adiw	r24, 0x3c	; 60
    13fe:	fc 01       	movw	r30, r24
    1400:	e2 0f       	add	r30, r18
    1402:	f3 1f       	adc	r31, r19
    1404:	80 81       	ld	r24, Z
    1406:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <UART_sendByte>
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a8 ec       	ldi	r26, 0xC8	; 200
    1410:	b2 e4       	ldi	r27, 0x42	; 66
    1412:	8f a3       	std	Y+39, r24	; 0x27
    1414:	98 a7       	std	Y+40, r25	; 0x28
    1416:	a9 a7       	std	Y+41, r26	; 0x29
    1418:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141a:	6f a1       	ldd	r22, Y+39	; 0x27
    141c:	78 a5       	ldd	r23, Y+40	; 0x28
    141e:	89 a5       	ldd	r24, Y+41	; 0x29
    1420:	9a a5       	ldd	r25, Y+42	; 0x2a
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	4a e7       	ldi	r20, 0x7A	; 122
    1428:	53 e4       	ldi	r21, 0x43	; 67
    142a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	8b a3       	std	Y+35, r24	; 0x23
    1434:	9c a3       	std	Y+36, r25	; 0x24
    1436:	ad a3       	std	Y+37, r26	; 0x25
    1438:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    143a:	6b a1       	ldd	r22, Y+35	; 0x23
    143c:	7c a1       	ldd	r23, Y+36	; 0x24
    143e:	8d a1       	ldd	r24, Y+37	; 0x25
    1440:	9e a1       	ldd	r25, Y+38	; 0x26
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e8       	ldi	r20, 0x80	; 128
    1448:	5f e3       	ldi	r21, 0x3F	; 63
    144a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    144e:	88 23       	and	r24, r24
    1450:	2c f4       	brge	.+10     	; 0x145c <main+0x218>
		__ticks = 1;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9a a3       	std	Y+34, r25	; 0x22
    1458:	89 a3       	std	Y+33, r24	; 0x21
    145a:	3f c0       	rjmp	.+126    	; 0x14da <main+0x296>
	else if (__tmp > 65535)
    145c:	6b a1       	ldd	r22, Y+35	; 0x23
    145e:	7c a1       	ldd	r23, Y+36	; 0x24
    1460:	8d a1       	ldd	r24, Y+37	; 0x25
    1462:	9e a1       	ldd	r25, Y+38	; 0x26
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	3f ef       	ldi	r19, 0xFF	; 255
    1468:	4f e7       	ldi	r20, 0x7F	; 127
    146a:	57 e4       	ldi	r21, 0x47	; 71
    146c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1470:	18 16       	cp	r1, r24
    1472:	4c f5       	brge	.+82     	; 0x14c6 <main+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1474:	6f a1       	ldd	r22, Y+39	; 0x27
    1476:	78 a5       	ldd	r23, Y+40	; 0x28
    1478:	89 a5       	ldd	r24, Y+41	; 0x29
    147a:	9a a5       	ldd	r25, Y+42	; 0x2a
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e2       	ldi	r20, 0x20	; 32
    1482:	51 e4       	ldi	r21, 0x41	; 65
    1484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	9a a3       	std	Y+34, r25	; 0x22
    149a:	89 a3       	std	Y+33, r24	; 0x21
    149c:	0f c0       	rjmp	.+30     	; 0x14bc <main+0x278>
    149e:	89 e1       	ldi	r24, 0x19	; 25
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	98 a3       	std	Y+32, r25	; 0x20
    14a4:	8f 8f       	std	Y+31, r24	; 0x1f
    14a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14a8:	98 a1       	ldd	r25, Y+32	; 0x20
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <main+0x266>
    14ae:	98 a3       	std	Y+32, r25	; 0x20
    14b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b2:	89 a1       	ldd	r24, Y+33	; 0x21
    14b4:	9a a1       	ldd	r25, Y+34	; 0x22
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	9a a3       	std	Y+34, r25	; 0x22
    14ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14bc:	89 a1       	ldd	r24, Y+33	; 0x21
    14be:	9a a1       	ldd	r25, Y+34	; 0x22
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	69 f7       	brne	.-38     	; 0x149e <main+0x25a>
    14c4:	14 c0       	rjmp	.+40     	; 0x14ee <main+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c6:	6b a1       	ldd	r22, Y+35	; 0x23
    14c8:	7c a1       	ldd	r23, Y+36	; 0x24
    14ca:	8d a1       	ldd	r24, Y+37	; 0x25
    14cc:	9e a1       	ldd	r25, Y+38	; 0x26
    14ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	9a a3       	std	Y+34, r25	; 0x22
    14d8:	89 a3       	std	Y+33, r24	; 0x21
    14da:	89 a1       	ldd	r24, Y+33	; 0x21
    14dc:	9a a1       	ldd	r25, Y+34	; 0x22
    14de:	9e 8f       	std	Y+30, r25	; 0x1e
    14e0:	8d 8f       	std	Y+29, r24	; 0x1d
    14e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <main+0x2a2>
    14ea:	9e 8f       	std	Y+30, r25	; 0x1e
    14ec:	8d 8f       	std	Y+29, r24	; 0x1d
		recieve_write (READY3);
		recieve_write (READY1);
	}
	else if (recieve== READY6){
	while (recieve !=READY6);
	for (i=0; i<5 ;i++){
    14ee:	8b ad       	ldd	r24, Y+59	; 0x3b
    14f0:	8f 5f       	subi	r24, 0xFF	; 255
    14f2:	8b af       	std	Y+59, r24	; 0x3b
    14f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    14f6:	85 30       	cpi	r24, 0x05	; 5
    14f8:	08 f4       	brcc	.+2      	; 0x14fc <main+0x2b8>
    14fa:	6a cf       	rjmp	.-300    	; 0x13d0 <main+0x18c>
		EEPROM_readByte((0x000|i),&arr[i]);
		 UART_sendByte(arr[i]);
		_delay_ms(100);

	}
	uint8 RERECIEVE=UART_recieveByte();
    14fc:	0e 94 0d 0c 	call	0x181a	; 0x181a <UART_recieveByte>
    1500:	89 af       	std	Y+57, r24	; 0x39

  if (RERECIEVE==READY4){
    1502:	89 ad       	ldd	r24, Y+57	; 0x39
    1504:	88 32       	cpi	r24, 0x28	; 40
    1506:	09 f0       	breq	.+2      	; 0x150a <main+0x2c6>
    1508:	95 c0       	rjmp	.+298    	; 0x1634 <main+0x3f0>
	while (RERECIEVE!= READY4);
    150a:	89 ad       	ldd	r24, Y+57	; 0x39
    150c:	88 32       	cpi	r24, 0x28	; 40
    150e:	e9 f7       	brne	.-6      	; 0x150a <main+0x2c6>
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a8 ec       	ldi	r26, 0xC8	; 200
    1516:	b2 e4       	ldi	r27, 0x42	; 66
    1518:	89 8f       	std	Y+25, r24	; 0x19
    151a:	9a 8f       	std	Y+26, r25	; 0x1a
    151c:	ab 8f       	std	Y+27, r26	; 0x1b
    151e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1520:	69 8d       	ldd	r22, Y+25	; 0x19
    1522:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1524:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1526:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	4a e7       	ldi	r20, 0x7A	; 122
    152e:	53 e4       	ldi	r21, 0x43	; 67
    1530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	8d 8b       	std	Y+21, r24	; 0x15
    153a:	9e 8b       	std	Y+22, r25	; 0x16
    153c:	af 8b       	std	Y+23, r26	; 0x17
    153e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1540:	6d 89       	ldd	r22, Y+21	; 0x15
    1542:	7e 89       	ldd	r23, Y+22	; 0x16
    1544:	8f 89       	ldd	r24, Y+23	; 0x17
    1546:	98 8d       	ldd	r25, Y+24	; 0x18
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1554:	88 23       	and	r24, r24
    1556:	2c f4       	brge	.+10     	; 0x1562 <main+0x31e>
		__ticks = 1;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	9c 8b       	std	Y+20, r25	; 0x14
    155e:	8b 8b       	std	Y+19, r24	; 0x13
    1560:	3f c0       	rjmp	.+126    	; 0x15e0 <main+0x39c>
	else if (__tmp > 65535)
    1562:	6d 89       	ldd	r22, Y+21	; 0x15
    1564:	7e 89       	ldd	r23, Y+22	; 0x16
    1566:	8f 89       	ldd	r24, Y+23	; 0x17
    1568:	98 8d       	ldd	r25, Y+24	; 0x18
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	3f ef       	ldi	r19, 0xFF	; 255
    156e:	4f e7       	ldi	r20, 0x7F	; 127
    1570:	57 e4       	ldi	r21, 0x47	; 71
    1572:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1576:	18 16       	cp	r1, r24
    1578:	4c f5       	brge	.+82     	; 0x15cc <main+0x388>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157a:	69 8d       	ldd	r22, Y+25	; 0x19
    157c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    157e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1580:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e2       	ldi	r20, 0x20	; 32
    1588:	51 e4       	ldi	r21, 0x41	; 65
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9c 8b       	std	Y+20, r25	; 0x14
    15a0:	8b 8b       	std	Y+19, r24	; 0x13
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <main+0x37e>
    15a4:	89 e1       	ldi	r24, 0x19	; 25
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	9a 8b       	std	Y+18, r25	; 0x12
    15aa:	89 8b       	std	Y+17, r24	; 0x11
    15ac:	89 89       	ldd	r24, Y+17	; 0x11
    15ae:	9a 89       	ldd	r25, Y+18	; 0x12
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <main+0x36c>
    15b4:	9a 8b       	std	Y+18, r25	; 0x12
    15b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ba:	9c 89       	ldd	r25, Y+20	; 0x14
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	9c 8b       	std	Y+20, r25	; 0x14
    15c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c2:	8b 89       	ldd	r24, Y+19	; 0x13
    15c4:	9c 89       	ldd	r25, Y+20	; 0x14
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	69 f7       	brne	.-38     	; 0x15a4 <main+0x360>
    15ca:	14 c0       	rjmp	.+40     	; 0x15f4 <main+0x3b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15cc:	6d 89       	ldd	r22, Y+21	; 0x15
    15ce:	7e 89       	ldd	r23, Y+22	; 0x16
    15d0:	8f 89       	ldd	r24, Y+23	; 0x17
    15d2:	98 8d       	ldd	r25, Y+24	; 0x18
    15d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	9c 8b       	std	Y+20, r25	; 0x14
    15de:	8b 8b       	std	Y+19, r24	; 0x13
    15e0:	8b 89       	ldd	r24, Y+19	; 0x13
    15e2:	9c 89       	ldd	r25, Y+20	; 0x14
    15e4:	98 8b       	std	Y+16, r25	; 0x10
    15e6:	8f 87       	std	Y+15, r24	; 0x0f
    15e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ea:	98 89       	ldd	r25, Y+16	; 0x10
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <main+0x3a8>
    15f0:	98 8b       	std	Y+16, r25	; 0x10
    15f2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	SET_BIT(DDRA,0);
    15f4:	aa e3       	ldi	r26, 0x3A	; 58
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	ea e3       	ldi	r30, 0x3A	; 58
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	81 60       	ori	r24, 0x01	; 1
    1600:	8c 93       	st	X, r24
	SET_BIT(PORTA,0);
    1602:	ab e3       	ldi	r26, 0x3B	; 59
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	eb e3       	ldi	r30, 0x3B	; 59
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	81 60       	ori	r24, 0x01	; 1
    160e:	8c 93       	st	X, r24
	 timer0_init_normal_mode(clk_1024 , 5 );
    1610:	85 e0       	ldi	r24, 0x05	; 5
    1612:	65 e0       	ldi	r22, 0x05	; 5
    1614:	0e 94 c7 08 	call	0x118e	; 0x118e <timer0_init_normal_mode>
	 while (second!=4);
    1618:	80 91 68 00 	lds	r24, 0x0068
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	e1 f7       	brne	.-8      	; 0x1618 <main+0x3d4>
	 second = 0;
    1620:	10 92 68 00 	sts	0x0068, r1
	 CLEAR_BIT(PORTA,0);
    1624:	ab e3       	ldi	r26, 0x3B	; 59
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	eb e3       	ldi	r30, 0x3B	; 59
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8e 7f       	andi	r24, 0xFE	; 254
    1630:	8c 93       	st	X, r24
    1632:	1c ce       	rjmp	.-968    	; 0x126c <main+0x28>

  }
else if (RERECIEVE==READY7){
    1634:	89 ad       	ldd	r24, Y+57	; 0x39
    1636:	86 34       	cpi	r24, 0x46	; 70
    1638:	09 f0       	breq	.+2      	; 0x163c <main+0x3f8>
    163a:	18 ce       	rjmp	.-976    	; 0x126c <main+0x28>
	for(i=0;i<5;i++){
    163c:	1b ae       	std	Y+59, r1	; 0x3b
    163e:	94 c0       	rjmp	.+296    	; 0x1768 <main+0x524>
	UART_sendByte(READY7);
    1640:	86 e4       	ldi	r24, 0x46	; 70
    1642:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <UART_sendByte>
	arr[i]=UART_recieveByte();
    1646:	8b ad       	ldd	r24, Y+59	; 0x3b
    1648:	08 2f       	mov	r16, r24
    164a:	10 e0       	ldi	r17, 0x00	; 0
    164c:	0e 94 0d 0c 	call	0x181a	; 0x181a <UART_recieveByte>
    1650:	28 2f       	mov	r18, r24
    1652:	ce 01       	movw	r24, r28
    1654:	cc 96       	adiw	r24, 0x3c	; 60
    1656:	fc 01       	movw	r30, r24
    1658:	e0 0f       	add	r30, r16
    165a:	f1 1f       	adc	r31, r17
    165c:	20 83       	st	Z, r18
	EEPROM_writeByte((0x000|i),arr[i]);
    165e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1660:	48 2f       	mov	r20, r24
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	8b ad       	ldd	r24, Y+59	; 0x3b
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	ce 01       	movw	r24, r28
    166c:	cc 96       	adiw	r24, 0x3c	; 60
    166e:	fc 01       	movw	r30, r24
    1670:	e2 0f       	add	r30, r18
    1672:	f3 1f       	adc	r31, r19
    1674:	20 81       	ld	r18, Z
    1676:	ca 01       	movw	r24, r20
    1678:	62 2f       	mov	r22, r18
    167a:	0e 94 ac 05 	call	0xb58	; 0xb58 <EEPROM_writeByte>
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	a8 ec       	ldi	r26, 0xC8	; 200
    1684:	b2 e4       	ldi	r27, 0x42	; 66
    1686:	8b 87       	std	Y+11, r24	; 0x0b
    1688:	9c 87       	std	Y+12, r25	; 0x0c
    168a:	ad 87       	std	Y+13, r26	; 0x0d
    168c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1690:	7c 85       	ldd	r23, Y+12	; 0x0c
    1692:	8d 85       	ldd	r24, Y+13	; 0x0d
    1694:	9e 85       	ldd	r25, Y+14	; 0x0e
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	4a e7       	ldi	r20, 0x7A	; 122
    169c:	53 e4       	ldi	r21, 0x43	; 67
    169e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	8f 83       	std	Y+7, r24	; 0x07
    16a8:	98 87       	std	Y+8, r25	; 0x08
    16aa:	a9 87       	std	Y+9, r26	; 0x09
    16ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ae:	6f 81       	ldd	r22, Y+7	; 0x07
    16b0:	78 85       	ldd	r23, Y+8	; 0x08
    16b2:	89 85       	ldd	r24, Y+9	; 0x09
    16b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e8       	ldi	r20, 0x80	; 128
    16bc:	5f e3       	ldi	r21, 0x3F	; 63
    16be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c2:	88 23       	and	r24, r24
    16c4:	2c f4       	brge	.+10     	; 0x16d0 <main+0x48c>
		__ticks = 1;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	9e 83       	std	Y+6, r25	; 0x06
    16cc:	8d 83       	std	Y+5, r24	; 0x05
    16ce:	3f c0       	rjmp	.+126    	; 0x174e <main+0x50a>
	else if (__tmp > 65535)
    16d0:	6f 81       	ldd	r22, Y+7	; 0x07
    16d2:	78 85       	ldd	r23, Y+8	; 0x08
    16d4:	89 85       	ldd	r24, Y+9	; 0x09
    16d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	3f ef       	ldi	r19, 0xFF	; 255
    16dc:	4f e7       	ldi	r20, 0x7F	; 127
    16de:	57 e4       	ldi	r21, 0x47	; 71
    16e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e4:	18 16       	cp	r1, r24
    16e6:	4c f5       	brge	.+82     	; 0x173a <main+0x4f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e2       	ldi	r20, 0x20	; 32
    16f6:	51 e4       	ldi	r21, 0x41	; 65
    16f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	bc 01       	movw	r22, r24
    1702:	cd 01       	movw	r24, r26
    1704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	9e 83       	std	Y+6, r25	; 0x06
    170e:	8d 83       	std	Y+5, r24	; 0x05
    1710:	0f c0       	rjmp	.+30     	; 0x1730 <main+0x4ec>
    1712:	89 e1       	ldi	r24, 0x19	; 25
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	9c 83       	std	Y+4, r25	; 0x04
    1718:	8b 83       	std	Y+3, r24	; 0x03
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	f1 f7       	brne	.-4      	; 0x171e <main+0x4da>
    1722:	9c 83       	std	Y+4, r25	; 0x04
    1724:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
    1728:	9e 81       	ldd	r25, Y+6	; 0x06
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1730:	8d 81       	ldd	r24, Y+5	; 0x05
    1732:	9e 81       	ldd	r25, Y+6	; 0x06
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	69 f7       	brne	.-38     	; 0x1712 <main+0x4ce>
    1738:	14 c0       	rjmp	.+40     	; 0x1762 <main+0x51e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173a:	6f 81       	ldd	r22, Y+7	; 0x07
    173c:	78 85       	ldd	r23, Y+8	; 0x08
    173e:	89 85       	ldd	r24, Y+9	; 0x09
    1740:	9a 85       	ldd	r25, Y+10	; 0x0a
    1742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	9e 83       	std	Y+6, r25	; 0x06
    174c:	8d 83       	std	Y+5, r24	; 0x05
    174e:	8d 81       	ldd	r24, Y+5	; 0x05
    1750:	9e 81       	ldd	r25, Y+6	; 0x06
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	9a 81       	ldd	r25, Y+2	; 0x02
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <main+0x516>
    175e:	9a 83       	std	Y+2, r25	; 0x02
    1760:	89 83       	std	Y+1, r24	; 0x01
	 second = 0;
	 CLEAR_BIT(PORTA,0);

  }
else if (RERECIEVE==READY7){
	for(i=0;i<5;i++){
    1762:	8b ad       	ldd	r24, Y+59	; 0x3b
    1764:	8f 5f       	subi	r24, 0xFF	; 255
    1766:	8b af       	std	Y+59, r24	; 0x3b
    1768:	8b ad       	ldd	r24, Y+59	; 0x3b
    176a:	85 30       	cpi	r24, 0x05	; 5
    176c:	08 f4       	brcc	.+2      	; 0x1770 <main+0x52c>
    176e:	68 cf       	rjmp	.-304    	; 0x1640 <main+0x3fc>
	arr[i]=UART_recieveByte();
	EEPROM_writeByte((0x000|i),arr[i]);
	_delay_ms(100);
}

timer0_init_normal_mode(clk_1024, 5);
    1770:	85 e0       	ldi	r24, 0x05	; 5
    1772:	65 e0       	ldi	r22, 0x05	; 5
    1774:	0e 94 c7 08 	call	0x118e	; 0x118e <timer0_init_normal_mode>
			motoropen();
    1778:	0e 94 4d 06 	call	0xc9a	; 0xc9a <motoropen>

			while (second != 2);
    177c:	80 91 68 00 	lds	r24, 0x0068
    1780:	82 30       	cpi	r24, 0x02	; 2
    1782:	e1 f7       	brne	.-8      	; 0x177c <main+0x538>
			second=0;
    1784:	10 92 68 00 	sts	0x0068, r1

			motorclose();
    1788:	0e 94 e7 06 	call	0xdce	; 0xdce <motorclose>
			while (second != 2);
    178c:	80 91 68 00 	lds	r24, 0x0068
    1790:	82 30       	cpi	r24, 0x02	; 2
    1792:	e1 f7       	brne	.-8      	; 0x178c <main+0x548>
			second = 0;
    1794:	10 92 68 00 	sts	0x0068, r1
			PORTB=0XFC;
    1798:	e8 e3       	ldi	r30, 0x38	; 56
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	8c ef       	ldi	r24, 0xFC	; 252
    179e:	80 83       	st	Z, r24
			timer0_deinit();
    17a0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <timer0_deinit>
    17a4:	63 cd       	rjmp	.-1338   	; 0x126c <main+0x28>

000017a6 <UART_init>:
 *      Author: rahma
 */

#include "uart.h"
#define BAUD_PRESCALE (((F_CPU / (Baud_Rate * 8UL))) - 1)
void UART_init(){
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
	UCSRA|=(1<<U2X);           //for double transmission rate
    17ae:	ab e2       	ldi	r26, 0x2B	; 43
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	eb e2       	ldi	r30, 0x2B	; 43
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	82 60       	ori	r24, 0x02	; 2
    17ba:	8c 93       	st	X, r24
	UCSRB |=(1<<TXEN)|(1<<RXEN);           // transmitter and receiver enable
    17bc:	aa e2       	ldi	r26, 0x2A	; 42
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	ea e2       	ldi	r30, 0x2A	; 42
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	88 61       	ori	r24, 0x18	; 24
    17c8:	8c 93       	st	X, r24
	UCSRC|= (1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);         // UCSZ1 & UCSZ0 is 0 and UCSZ2 is 1 for8 bit mode and URSEL must be one for writing in UCSRC and URSEL is 0 for Asynchronous mode
    17ca:	a0 e4       	ldi	r26, 0x40	; 64
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e0 e4       	ldi	r30, 0x40	; 64
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	86 68       	ori	r24, 0x86	; 134
    17d6:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    17d8:	e0 e4       	ldi	r30, 0x40	; 64
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    17de:	e9 e2       	ldi	r30, 0x29	; 41
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	8c e0       	ldi	r24, 0x0C	; 12
    17e4:	80 83       	st	Z, r24
}
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <UART_sendByte>:
void UART_sendByte(const uint8 data){
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	0f 92       	push	r0
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	89 83       	std	Y+1, r24	; 0x01
while  BIT_IS_CLEAR(UCSRA,UDRE); //polling until UDRE is set to one means that UDR is empty and ready for transmitting
    17f8:	eb e2       	ldi	r30, 0x2B	; 43
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	88 2f       	mov	r24, r24
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	80 72       	andi	r24, 0x20	; 32
    1804:	90 70       	andi	r25, 0x00	; 0
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	b9 f3       	breq	.-18     	; 0x17f8 <UART_sendByte+0xc>
UDR =data; // Data is stored in UDR and its now not empty make the UDRE cleared
    180a:	ec e2       	ldi	r30, 0x2C	; 44
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	80 83       	st	Z, r24

}
    1812:	0f 90       	pop	r0
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <UART_recieveByte>:
uint8 UART_recieveByte(){
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
	while BIT_IS_CLEAR(UCSRA,RXC); //polling until receive complete , as RXC is set one when recieve complete
    1822:	eb e2       	ldi	r30, 0x2B	; 43
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	88 23       	and	r24, r24
    182a:	dc f7       	brge	.-10     	; 0x1822 <UART_recieveByte+0x8>
	return UDR; // read UART after receiving from UDR and the RXC flag  will be cleared after read this data
    182c:	ec e2       	ldi	r30, 0x2C	; 44
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
}
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <UART_sendString>:
void UART_sendString(const uint8*Str){
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	00 d0       	rcall	.+0      	; 0x183e <UART_sendString+0x6>
    183e:	00 d0       	rcall	.+0      	; 0x1840 <UART_sendString+0x8>
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	9c 83       	std	Y+4, r25	; 0x04
    1846:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    1848:	1a 82       	std	Y+2, r1	; 0x02
    184a:	19 82       	std	Y+1, r1	; 0x01
    184c:	0f c0       	rjmp	.+30     	; 0x186c <UART_sendString+0x34>
	while (Str[i]!='\0'){
		UART_sendByte(Str[i]);
    184e:	29 81       	ldd	r18, Y+1	; 0x01
    1850:	3a 81       	ldd	r19, Y+2	; 0x02
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	9c 81       	ldd	r25, Y+4	; 0x04
    1856:	fc 01       	movw	r30, r24
    1858:	e2 0f       	add	r30, r18
    185a:	f3 1f       	adc	r31, r19
    185c:	80 81       	ld	r24, Z
    185e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <UART_sendByte>
		i++;
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	9a 83       	std	Y+2, r25	; 0x02
    186a:	89 83       	std	Y+1, r24	; 0x01
	while BIT_IS_CLEAR(UCSRA,RXC); //polling until receive complete , as RXC is set one when recieve complete
	return UDR; // read UART after receiving from UDR and the RXC flag  will be cleared after read this data
}
void UART_sendString(const uint8*Str){
	int i=0;
	while (Str[i]!='\0'){
    186c:	29 81       	ldd	r18, Y+1	; 0x01
    186e:	3a 81       	ldd	r19, Y+2	; 0x02
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	fc 01       	movw	r30, r24
    1876:	e2 0f       	add	r30, r18
    1878:	f3 1f       	adc	r31, r19
    187a:	80 81       	ld	r24, Z
    187c:	88 23       	and	r24, r24
    187e:	39 f7       	brne	.-50     	; 0x184e <UART_sendString+0x16>
		UART_sendByte(Str[i]);
		i++;
	}
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <UART_recieveString>:
void UART_recieveString(uint8*Str){
    188e:	0f 93       	push	r16
    1890:	1f 93       	push	r17
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	00 d0       	rcall	.+0      	; 0x1898 <UART_recieveString+0xa>
    1898:	0f 92       	push	r0
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	9b 83       	std	Y+3, r25	; 0x03
    18a0:	8a 83       	std	Y+2, r24	; 0x02

uint8 i = 0;
    18a2:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	9b 81       	ldd	r25, Y+3	; 0x03
    18ae:	8c 01       	movw	r16, r24
    18b0:	02 0f       	add	r16, r18
    18b2:	13 1f       	adc	r17, r19
    18b4:	0e 94 0d 0c 	call	0x181a	; 0x181a <UART_recieveByte>
    18b8:	f8 01       	movw	r30, r16
    18ba:	80 83       	st	Z, r24
    18bc:	0f c0       	rjmp	.+30     	; 0x18dc <UART_recieveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	9b 81       	ldd	r25, Y+3	; 0x03
    18ce:	8c 01       	movw	r16, r24
    18d0:	02 0f       	add	r16, r18
    18d2:	13 1f       	adc	r17, r19
    18d4:	0e 94 0d 0c 	call	0x181a	; 0x181a <UART_recieveByte>
    18d8:	f8 01       	movw	r30, r16
    18da:	80 83       	st	Z, r24
}
void UART_recieveString(uint8*Str){

uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	9b 81       	ldd	r25, Y+3	; 0x03
    18e6:	fc 01       	movw	r30, r24
    18e8:	e2 0f       	add	r30, r18
    18ea:	f3 1f       	adc	r31, r19
    18ec:	80 81       	ld	r24, Z
    18ee:	83 32       	cpi	r24, 0x23	; 35
    18f0:	31 f7       	brne	.-52     	; 0x18be <UART_recieveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';}
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	9b 81       	ldd	r25, Y+3	; 0x03
    18fc:	fc 01       	movw	r30, r24
    18fe:	e2 0f       	add	r30, r18
    1900:	f3 1f       	adc	r31, r19
    1902:	10 82       	st	Z, r1
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	08 95       	ret

00001914 <__prologue_saves__>:
    1914:	2f 92       	push	r2
    1916:	3f 92       	push	r3
    1918:	4f 92       	push	r4
    191a:	5f 92       	push	r5
    191c:	6f 92       	push	r6
    191e:	7f 92       	push	r7
    1920:	8f 92       	push	r8
    1922:	9f 92       	push	r9
    1924:	af 92       	push	r10
    1926:	bf 92       	push	r11
    1928:	cf 92       	push	r12
    192a:	df 92       	push	r13
    192c:	ef 92       	push	r14
    192e:	ff 92       	push	r15
    1930:	0f 93       	push	r16
    1932:	1f 93       	push	r17
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	ca 1b       	sub	r28, r26
    193e:	db 0b       	sbc	r29, r27
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	09 94       	ijmp

0000194c <__epilogue_restores__>:
    194c:	2a 88       	ldd	r2, Y+18	; 0x12
    194e:	39 88       	ldd	r3, Y+17	; 0x11
    1950:	48 88       	ldd	r4, Y+16	; 0x10
    1952:	5f 84       	ldd	r5, Y+15	; 0x0f
    1954:	6e 84       	ldd	r6, Y+14	; 0x0e
    1956:	7d 84       	ldd	r7, Y+13	; 0x0d
    1958:	8c 84       	ldd	r8, Y+12	; 0x0c
    195a:	9b 84       	ldd	r9, Y+11	; 0x0b
    195c:	aa 84       	ldd	r10, Y+10	; 0x0a
    195e:	b9 84       	ldd	r11, Y+9	; 0x09
    1960:	c8 84       	ldd	r12, Y+8	; 0x08
    1962:	df 80       	ldd	r13, Y+7	; 0x07
    1964:	ee 80       	ldd	r14, Y+6	; 0x06
    1966:	fd 80       	ldd	r15, Y+5	; 0x05
    1968:	0c 81       	ldd	r16, Y+4	; 0x04
    196a:	1b 81       	ldd	r17, Y+3	; 0x03
    196c:	aa 81       	ldd	r26, Y+2	; 0x02
    196e:	b9 81       	ldd	r27, Y+1	; 0x01
    1970:	ce 0f       	add	r28, r30
    1972:	d1 1d       	adc	r29, r1
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	ed 01       	movw	r28, r26
    1980:	08 95       	ret

00001982 <_exit>:
    1982:	f8 94       	cli

00001984 <__stop_program>:
    1984:	ff cf       	rjmp	.-2      	; 0x1984 <__stop_program>


MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00002a96  00002b2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800172  00800172  00002c3c  2**0
                  ALLOC
  3 .stab         0000270c  00000000  00000000  00002c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e62  00000000  00000000  00005348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000061aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000062ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000645a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000080a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a129  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a8f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <main>
      8a:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cd 14 	jmp	0x299a	; 0x299a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cd 14 	jmp	0x299a	; 0x299a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <get_pass>:
 *      Author: rahma
 */

#include "Functions.h"
uint8 second;
void get_pass(char arr[],uint8 sent_pass[]){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a3 97       	sbiw	r28, 0x23	; 35
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	99 a3       	std	Y+33, r25	; 0x21
     b5c:	88 a3       	std	Y+32, r24	; 0x20
     b5e:	7b a3       	std	Y+35, r23	; 0x23
     b60:	6a a3       	std	Y+34, r22	; 0x22
	uint8 key;
	LCD_sendCommand(CLEAR_COMMAND);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
	LCD_displayStringRowColumn(0,0,arr);
     b68:	28 a1       	ldd	r18, Y+32	; 0x20
     b6a:	39 a1       	ldd	r19, Y+33	; 0x21
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	a9 01       	movw	r20, r18
     b72:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_goToRowColumn>
	for (int i=0 ;i<5 ; i++){
     b7e:	1e 8e       	std	Y+30, r1	; 0x1e
     b80:	1d 8e       	std	Y+29, r1	; 0x1d
     b82:	86 c0       	rjmp	.+268    	; 0xc90 <get_pass+0x14a>
		key=KeyPad_getPressedKey(); // get pressed key
     b84:	0e 94 61 09 	call	0x12c2	; 0x12c2 <KeyPad_getPressedKey>
     b88:	8f 8f       	std	Y+31, r24	; 0x1f
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	aa e7       	ldi	r26, 0x7A	; 122
     b90:	b3 e4       	ldi	r27, 0x43	; 67
     b92:	89 8f       	std	Y+25, r24	; 0x19
     b94:	9a 8f       	std	Y+26, r25	; 0x1a
     b96:	ab 8f       	std	Y+27, r26	; 0x1b
     b98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b9a:	69 8d       	ldd	r22, Y+25	; 0x19
     b9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	4a e7       	ldi	r20, 0x7A	; 122
     ba8:	53 e4       	ldi	r21, 0x43	; 67
     baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	8d 8b       	std	Y+21, r24	; 0x15
     bb4:	9e 8b       	std	Y+22, r25	; 0x16
     bb6:	af 8b       	std	Y+23, r26	; 0x17
     bb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bba:	6d 89       	ldd	r22, Y+21	; 0x15
     bbc:	7e 89       	ldd	r23, Y+22	; 0x16
     bbe:	8f 89       	ldd	r24, Y+23	; 0x17
     bc0:	98 8d       	ldd	r25, Y+24	; 0x18
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e8       	ldi	r20, 0x80	; 128
     bc8:	5f e3       	ldi	r21, 0x3F	; 63
     bca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bce:	88 23       	and	r24, r24
     bd0:	2c f4       	brge	.+10     	; 0xbdc <get_pass+0x96>
		__ticks = 1;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	9c 8b       	std	Y+20, r25	; 0x14
     bd8:	8b 8b       	std	Y+19, r24	; 0x13
     bda:	3f c0       	rjmp	.+126    	; 0xc5a <get_pass+0x114>
	else if (__tmp > 65535)
     bdc:	6d 89       	ldd	r22, Y+21	; 0x15
     bde:	7e 89       	ldd	r23, Y+22	; 0x16
     be0:	8f 89       	ldd	r24, Y+23	; 0x17
     be2:	98 8d       	ldd	r25, Y+24	; 0x18
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	3f ef       	ldi	r19, 0xFF	; 255
     be8:	4f e7       	ldi	r20, 0x7F	; 127
     bea:	57 e4       	ldi	r21, 0x47	; 71
     bec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf0:	18 16       	cp	r1, r24
     bf2:	4c f5       	brge	.+82     	; 0xc46 <get_pass+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf4:	69 8d       	ldd	r22, Y+25	; 0x19
     bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e2       	ldi	r20, 0x20	; 32
     c02:	51 e4       	ldi	r21, 0x41	; 65
     c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	bc 01       	movw	r22, r24
     c0e:	cd 01       	movw	r24, r26
     c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	9c 8b       	std	Y+20, r25	; 0x14
     c1a:	8b 8b       	std	Y+19, r24	; 0x13
     c1c:	0f c0       	rjmp	.+30     	; 0xc3c <get_pass+0xf6>
     c1e:	89 e1       	ldi	r24, 0x19	; 25
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	9a 8b       	std	Y+18, r25	; 0x12
     c24:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c26:	89 89       	ldd	r24, Y+17	; 0x11
     c28:	9a 89       	ldd	r25, Y+18	; 0x12
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <get_pass+0xe4>
     c2e:	9a 8b       	std	Y+18, r25	; 0x12
     c30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c32:	8b 89       	ldd	r24, Y+19	; 0x13
     c34:	9c 89       	ldd	r25, Y+20	; 0x14
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	9c 8b       	std	Y+20, r25	; 0x14
     c3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3c:	8b 89       	ldd	r24, Y+19	; 0x13
     c3e:	9c 89       	ldd	r25, Y+20	; 0x14
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	69 f7       	brne	.-38     	; 0xc1e <get_pass+0xd8>
     c44:	14 c0       	rjmp	.+40     	; 0xc6e <get_pass+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c46:	6d 89       	ldd	r22, Y+21	; 0x15
     c48:	7e 89       	ldd	r23, Y+22	; 0x16
     c4a:	8f 89       	ldd	r24, Y+23	; 0x17
     c4c:	98 8d       	ldd	r25, Y+24	; 0x18
     c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	9c 8b       	std	Y+20, r25	; 0x14
     c58:	8b 8b       	std	Y+19, r24	; 0x13
     c5a:	8b 89       	ldd	r24, Y+19	; 0x13
     c5c:	9c 89       	ldd	r25, Y+20	; 0x14
     c5e:	98 8b       	std	Y+16, r25	; 0x10
     c60:	8f 87       	std	Y+15, r24	; 0x0f
     c62:	8f 85       	ldd	r24, Y+15	; 0x0f
     c64:	98 89       	ldd	r25, Y+16	; 0x10
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <get_pass+0x120>
     c6a:	98 8b       	std	Y+16, r25	; 0x10
     c6c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms (250); // no pressed key can until 250 ms , if key pressed more than 500 milli seconds its count more than press
		LCD_displayCharacter('*');
     c6e:	8a e2       	ldi	r24, 0x2A	; 42
     c70:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LCD_displayCharacter>
		sent_pass[i]=key;
     c74:	2d 8d       	ldd	r18, Y+29	; 0x1d
     c76:	3e 8d       	ldd	r19, Y+30	; 0x1e
     c78:	8a a1       	ldd	r24, Y+34	; 0x22
     c7a:	9b a1       	ldd	r25, Y+35	; 0x23
     c7c:	fc 01       	movw	r30, r24
     c7e:	e2 0f       	add	r30, r18
     c80:	f3 1f       	adc	r31, r19
     c82:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c84:	80 83       	st	Z, r24
void get_pass(char arr[],uint8 sent_pass[]){
	uint8 key;
	LCD_sendCommand(CLEAR_COMMAND);
	LCD_displayStringRowColumn(0,0,arr);
	LCD_goToRowColumn(1,0);
	for (int i=0 ;i<5 ; i++){
     c86:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c88:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	9e 8f       	std	Y+30, r25	; 0x1e
     c8e:	8d 8f       	std	Y+29, r24	; 0x1d
     c90:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c92:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c94:	85 30       	cpi	r24, 0x05	; 5
     c96:	91 05       	cpc	r25, r1
     c98:	0c f4       	brge	.+2      	; 0xc9c <get_pass+0x156>
     c9a:	74 cf       	rjmp	.-280    	; 0xb84 <get_pass+0x3e>
		LCD_displayCharacter('*');
		sent_pass[i]=key;

	}

	key=KeyPad_getPressedKey();
     c9c:	0e 94 61 09 	call	0x12c2	; 0x12c2 <KeyPad_getPressedKey>
     ca0:	8f 8f       	std	Y+31, r24	; 0x1f
     ca2:	7f c0       	rjmp	.+254    	; 0xda2 <get_pass+0x25c>

	while (key!=13){
	LCD_sendCommand(CLEAR_COMMAND);
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
	LCD_displayStringRowColumn(0,0,"press on/c on Err");
     caa:	20 e6       	ldi	r18, 0x60	; 96
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	a9 01       	movw	r20, r18
     cb4:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_displayStringRowColumn>
	key = KeyPad_getPressedKey(); /* get the pressed key number */
     cb8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <KeyPad_getPressedKey>
     cbc:	8f 8f       	std	Y+31, r24	; 0x1f
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	aa e7       	ldi	r26, 0x7A	; 122
     cc4:	b3 e4       	ldi	r27, 0x43	; 67
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a e7       	ldi	r20, 0x7A	; 122
     cdc:	53 e4       	ldi	r21, 0x43	; 67
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <get_pass+0x1ca>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <get_pass+0x248>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <get_pass+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <get_pass+0x22a>
     d52:	89 e1       	ldi	r24, 0x19	; 25
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <get_pass+0x218>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <get_pass+0x20c>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <get_pass+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <get_pass+0x254>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01

	}

	key=KeyPad_getPressedKey();

	while (key!=13){
     da2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     da4:	8d 30       	cpi	r24, 0x0D	; 13
     da6:	09 f0       	breq	.+2      	; 0xdaa <get_pass+0x264>
     da8:	7d cf       	rjmp	.-262    	; 0xca4 <get_pass+0x15e>
	LCD_sendCommand(CLEAR_COMMAND);
	LCD_displayStringRowColumn(0,0,"press on/c on Err");
	key = KeyPad_getPressedKey(); /* get the pressed key number */
	_delay_ms(250); /* Press time  */}
	if (key==13){
     daa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dac:	8d 30       	cpi	r24, 0x0D	; 13
     dae:	19 f4       	brne	.+6      	; 0xdb6 <get_pass+0x270>
		LCD_sendCommand(CLEAR_COMMAND);
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>

	}
}
     db6:	a3 96       	adiw	r28, 0x23	; 35
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <compare>:
uint8 compare(uint8 new_pass[], uint8 match_pass[] ){
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	28 97       	sbiw	r28, 0x08	; 8
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
     ddc:	9e 83       	std	Y+6, r25	; 0x06
     dde:	8d 83       	std	Y+5, r24	; 0x05
     de0:	78 87       	std	Y+8, r23	; 0x08
     de2:	6f 83       	std	Y+7, r22	; 0x07
	int j=0;
     de4:	1c 82       	std	Y+4, r1	; 0x04
     de6:	1b 82       	std	Y+3, r1	; 0x03
		if( new_pass [j]== match_pass[j])
		{j++;}

	 }
	 return j;*/
	for (int i=0 ; i<5 ; i++)
     de8:	1a 82       	std	Y+2, r1	; 0x02
     dea:	19 82       	std	Y+1, r1	; 0x01
     dec:	1c c0       	rjmp	.+56     	; 0xe26 <compare+0x5e>
	{if (new_pass [i]== match_pass[i]){
     dee:	29 81       	ldd	r18, Y+1	; 0x01
     df0:	3a 81       	ldd	r19, Y+2	; 0x02
     df2:	8d 81       	ldd	r24, Y+5	; 0x05
     df4:	9e 81       	ldd	r25, Y+6	; 0x06
     df6:	fc 01       	movw	r30, r24
     df8:	e2 0f       	add	r30, r18
     dfa:	f3 1f       	adc	r31, r19
     dfc:	40 81       	ld	r20, Z
     dfe:	29 81       	ldd	r18, Y+1	; 0x01
     e00:	3a 81       	ldd	r19, Y+2	; 0x02
     e02:	8f 81       	ldd	r24, Y+7	; 0x07
     e04:	98 85       	ldd	r25, Y+8	; 0x08
     e06:	fc 01       	movw	r30, r24
     e08:	e2 0f       	add	r30, r18
     e0a:	f3 1f       	adc	r31, r19
     e0c:	80 81       	ld	r24, Z
     e0e:	48 17       	cp	r20, r24
     e10:	29 f4       	brne	.+10     	; 0xe1c <compare+0x54>
		j++;
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	9c 81       	ldd	r25, Y+4	; 0x04
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	9c 83       	std	Y+4, r25	; 0x04
     e1a:	8b 83       	std	Y+3, r24	; 0x03
		if( new_pass [j]== match_pass[j])
		{j++;}

	 }
	 return j;*/
	for (int i=0 ; i<5 ; i++)
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
     e2a:	85 30       	cpi	r24, 0x05	; 5
     e2c:	91 05       	cpc	r25, r1
     e2e:	fc f2       	brlt	.-66     	; 0xdee <compare+0x26>
	{if (new_pass [i]== match_pass[i]){
		j++;

	}}
	if (j==5){LCD_sendCommand(CLEAR_COMMAND);
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	9c 81       	ldd	r25, Y+4	; 0x04
     e34:	85 30       	cpi	r24, 0x05	; 5
     e36:	91 05       	cpc	r25, r1
     e38:	59 f4       	brne	.+22     	; 0xe50 <compare+0x88>
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
	LCD_displayStringRowColumn(0,0,"Matched password");}
     e40:	22 e7       	ldi	r18, 0x72	; 114
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	a9 01       	movw	r20, r18
     e4a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_displayStringRowColumn>
     e4e:	0a c0       	rjmp	.+20     	; 0xe64 <compare+0x9c>
	else {LCD_sendCommand(CLEAR_COMMAND);
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
	LCD_displayStringRowColumn(0,0," Not Matched password");}
     e56:	23 e8       	ldi	r18, 0x83	; 131
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	a9 01       	movw	r20, r18
     e60:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_displayStringRowColumn>
	return j;  /*this function compare each element in two arrays check if two are matched or not*/
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e66:	28 96       	adiw	r28, 0x08	; 8
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <F_compare>:
void F_compare(uint8 new_pass[], uint8 match_pass[],char arr[],enum Ready R){
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	e7 97       	sbiw	r28, 0x37	; 55
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	9a ab       	std	Y+50, r25	; 0x32
     e8e:	89 ab       	std	Y+49, r24	; 0x31
     e90:	7c ab       	std	Y+52, r23	; 0x34
     e92:	6b ab       	std	Y+51, r22	; 0x33
     e94:	5e ab       	std	Y+54, r21	; 0x36
     e96:	4d ab       	std	Y+53, r20	; 0x35
     e98:	2f ab       	std	Y+55, r18	; 0x37
	int j ,z=0;
     e9a:	1e a6       	std	Y+46, r1	; 0x2e
     e9c:	1d a6       	std	Y+45, r1	; 0x2d
	j= compare(new_pass, match_pass);
     e9e:	89 a9       	ldd	r24, Y+49	; 0x31
     ea0:	9a a9       	ldd	r25, Y+50	; 0x32
     ea2:	2b a9       	ldd	r18, Y+51	; 0x33
     ea4:	3c a9       	ldd	r19, Y+52	; 0x34
     ea6:	b9 01       	movw	r22, r18
     ea8:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <compare>
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	98 ab       	std	Y+48, r25	; 0x30
     eb2:	8f a7       	std	Y+47, r24	; 0x2f
     eb4:	99 c1       	rjmp	.+818    	; 0x11e8 <F_compare+0x370>
	while (j!=5){
		get_pass(arr, match_pass);
     eb6:	8d a9       	ldd	r24, Y+53	; 0x35
     eb8:	9e a9       	ldd	r25, Y+54	; 0x36
     eba:	2b a9       	ldd	r18, Y+51	; 0x33
     ebc:	3c a9       	ldd	r19, Y+52	; 0x34
     ebe:	b9 01       	movw	r22, r18
     ec0:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_pass>
		j= compare(new_pass, match_pass);
     ec4:	89 a9       	ldd	r24, Y+49	; 0x31
     ec6:	9a a9       	ldd	r25, Y+50	; 0x32
     ec8:	2b a9       	ldd	r18, Y+51	; 0x33
     eca:	3c a9       	ldd	r19, Y+52	; 0x34
     ecc:	b9 01       	movw	r22, r18
     ece:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <compare>
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	98 ab       	std	Y+48, r25	; 0x30
     ed8:	8f a7       	std	Y+47, r24	; 0x2f
		z++;
     eda:	8d a5       	ldd	r24, Y+45	; 0x2d
     edc:	9e a5       	ldd	r25, Y+46	; 0x2e
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	9e a7       	std	Y+46, r25	; 0x2e
     ee2:	8d a7       	std	Y+45, r24	; 0x2d
		if (z==3){
     ee4:	8d a5       	ldd	r24, Y+45	; 0x2d
     ee6:	9e a5       	ldd	r25, Y+46	; 0x2e
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	91 05       	cpc	r25, r1
     eec:	09 f0       	breq	.+2      	; 0xef0 <F_compare+0x78>
     eee:	7c c1       	rjmp	.+760    	; 0x11e8 <F_compare+0x370>
			UART_sendByte(READY4);
     ef0:	88 e2       	ldi	r24, 0x28	; 40
     ef2:	0e 94 39 14 	call	0x2872	; 0x2872 <UART_sendByte>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a8 ec       	ldi	r26, 0xC8	; 200
     efc:	b2 e4       	ldi	r27, 0x42	; 66
     efe:	8f a3       	std	Y+39, r24	; 0x27
     f00:	98 a7       	std	Y+40, r25	; 0x28
     f02:	a9 a7       	std	Y+41, r26	; 0x29
     f04:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f06:	6f a1       	ldd	r22, Y+39	; 0x27
     f08:	78 a5       	ldd	r23, Y+40	; 0x28
     f0a:	89 a5       	ldd	r24, Y+41	; 0x29
     f0c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	4a e7       	ldi	r20, 0x7A	; 122
     f14:	53 e4       	ldi	r21, 0x43	; 67
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	8b a3       	std	Y+35, r24	; 0x23
     f20:	9c a3       	std	Y+36, r25	; 0x24
     f22:	ad a3       	std	Y+37, r26	; 0x25
     f24:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f26:	6b a1       	ldd	r22, Y+35	; 0x23
     f28:	7c a1       	ldd	r23, Y+36	; 0x24
     f2a:	8d a1       	ldd	r24, Y+37	; 0x25
     f2c:	9e a1       	ldd	r25, Y+38	; 0x26
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	5f e3       	ldi	r21, 0x3F	; 63
     f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f3a:	88 23       	and	r24, r24
     f3c:	2c f4       	brge	.+10     	; 0xf48 <F_compare+0xd0>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9a a3       	std	Y+34, r25	; 0x22
     f44:	89 a3       	std	Y+33, r24	; 0x21
     f46:	3f c0       	rjmp	.+126    	; 0xfc6 <F_compare+0x14e>
	else if (__tmp > 65535)
     f48:	6b a1       	ldd	r22, Y+35	; 0x23
     f4a:	7c a1       	ldd	r23, Y+36	; 0x24
     f4c:	8d a1       	ldd	r24, Y+37	; 0x25
     f4e:	9e a1       	ldd	r25, Y+38	; 0x26
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	4f e7       	ldi	r20, 0x7F	; 127
     f56:	57 e4       	ldi	r21, 0x47	; 71
     f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f5c:	18 16       	cp	r1, r24
     f5e:	4c f5       	brge	.+82     	; 0xfb2 <F_compare+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f60:	6f a1       	ldd	r22, Y+39	; 0x27
     f62:	78 a5       	ldd	r23, Y+40	; 0x28
     f64:	89 a5       	ldd	r24, Y+41	; 0x29
     f66:	9a a5       	ldd	r25, Y+42	; 0x2a
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e2       	ldi	r20, 0x20	; 32
     f6e:	51 e4       	ldi	r21, 0x41	; 65
     f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9a a3       	std	Y+34, r25	; 0x22
     f86:	89 a3       	std	Y+33, r24	; 0x21
     f88:	0f c0       	rjmp	.+30     	; 0xfa8 <F_compare+0x130>
     f8a:	89 e1       	ldi	r24, 0x19	; 25
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	98 a3       	std	Y+32, r25	; 0x20
     f90:	8f 8f       	std	Y+31, r24	; 0x1f
     f92:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f94:	98 a1       	ldd	r25, Y+32	; 0x20
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <F_compare+0x11e>
     f9a:	98 a3       	std	Y+32, r25	; 0x20
     f9c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9e:	89 a1       	ldd	r24, Y+33	; 0x21
     fa0:	9a a1       	ldd	r25, Y+34	; 0x22
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	9a a3       	std	Y+34, r25	; 0x22
     fa6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa8:	89 a1       	ldd	r24, Y+33	; 0x21
     faa:	9a a1       	ldd	r25, Y+34	; 0x22
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	69 f7       	brne	.-38     	; 0xf8a <F_compare+0x112>
     fb0:	14 c0       	rjmp	.+40     	; 0xfda <F_compare+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb2:	6b a1       	ldd	r22, Y+35	; 0x23
     fb4:	7c a1       	ldd	r23, Y+36	; 0x24
     fb6:	8d a1       	ldd	r24, Y+37	; 0x25
     fb8:	9e a1       	ldd	r25, Y+38	; 0x26
     fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	9a a3       	std	Y+34, r25	; 0x22
     fc4:	89 a3       	std	Y+33, r24	; 0x21
     fc6:	89 a1       	ldd	r24, Y+33	; 0x21
     fc8:	9a a1       	ldd	r25, Y+34	; 0x22
     fca:	9e 8f       	std	Y+30, r25	; 0x1e
     fcc:	8d 8f       	std	Y+29, r24	; 0x1d
     fce:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fd0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <F_compare+0x15a>
     fd6:	9e 8f       	std	Y+30, r25	; 0x1e
     fd8:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			 LCD_sendCommand(CLEAR_COMMAND);
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
			 LCD_displayStringRowColumn(0,0,"Thief!");
     fe0:	29 e9       	ldi	r18, 0x99	; 153
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	a9 01       	movw	r20, r18
     fea:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_displayStringRowColumn>
			 timer0_init_normal_mode(clk_1024, 5);
     fee:	85 e0       	ldi	r24, 0x05	; 5
     ff0:	65 e0       	ldi	r22, 0x05	; 5
     ff2:	0e 94 28 09 	call	0x1250	; 0x1250 <timer0_init_normal_mode>
			 while (second != 4);
     ff6:	80 91 73 01 	lds	r24, 0x0173
     ffa:	84 30       	cpi	r24, 0x04	; 4
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <F_compare+0x17e>
			 second = 0;
     ffe:	10 92 73 01 	sts	0x0173, r1
			 LCD_sendCommand(CLEAR_COMMAND);
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
			 LCD_displayStringRowColumn(0,0,"Reopen system.");
    1008:	20 ea       	ldi	r18, 0xA0	; 160
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	a9 01       	movw	r20, r18
    1012:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_displayStringRowColumn>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e4       	ldi	r25, 0x40	; 64
    101a:	ac e1       	ldi	r26, 0x1C	; 28
    101c:	b6 e4       	ldi	r27, 0x46	; 70
    101e:	89 8f       	std	Y+25, r24	; 0x19
    1020:	9a 8f       	std	Y+26, r25	; 0x1a
    1022:	ab 8f       	std	Y+27, r26	; 0x1b
    1024:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1026:	69 8d       	ldd	r22, Y+25	; 0x19
    1028:	7a 8d       	ldd	r23, Y+26	; 0x1a
    102a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    102c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	4a e7       	ldi	r20, 0x7A	; 122
    1034:	53 e4       	ldi	r21, 0x43	; 67
    1036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	8d 8b       	std	Y+21, r24	; 0x15
    1040:	9e 8b       	std	Y+22, r25	; 0x16
    1042:	af 8b       	std	Y+23, r26	; 0x17
    1044:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1046:	6d 89       	ldd	r22, Y+21	; 0x15
    1048:	7e 89       	ldd	r23, Y+22	; 0x16
    104a:	8f 89       	ldd	r24, Y+23	; 0x17
    104c:	98 8d       	ldd	r25, Y+24	; 0x18
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e8       	ldi	r20, 0x80	; 128
    1054:	5f e3       	ldi	r21, 0x3F	; 63
    1056:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    105a:	88 23       	and	r24, r24
    105c:	2c f4       	brge	.+10     	; 0x1068 <F_compare+0x1f0>
		__ticks = 1;
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	9c 8b       	std	Y+20, r25	; 0x14
    1064:	8b 8b       	std	Y+19, r24	; 0x13
    1066:	3f c0       	rjmp	.+126    	; 0x10e6 <F_compare+0x26e>
	else if (__tmp > 65535)
    1068:	6d 89       	ldd	r22, Y+21	; 0x15
    106a:	7e 89       	ldd	r23, Y+22	; 0x16
    106c:	8f 89       	ldd	r24, Y+23	; 0x17
    106e:	98 8d       	ldd	r25, Y+24	; 0x18
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	3f ef       	ldi	r19, 0xFF	; 255
    1074:	4f e7       	ldi	r20, 0x7F	; 127
    1076:	57 e4       	ldi	r21, 0x47	; 71
    1078:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    107c:	18 16       	cp	r1, r24
    107e:	4c f5       	brge	.+82     	; 0x10d2 <F_compare+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1080:	69 8d       	ldd	r22, Y+25	; 0x19
    1082:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1084:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1086:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e2       	ldi	r20, 0x20	; 32
    108e:	51 e4       	ldi	r21, 0x41	; 65
    1090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	9c 8b       	std	Y+20, r25	; 0x14
    10a6:	8b 8b       	std	Y+19, r24	; 0x13
    10a8:	0f c0       	rjmp	.+30     	; 0x10c8 <F_compare+0x250>
    10aa:	89 e1       	ldi	r24, 0x19	; 25
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	9a 8b       	std	Y+18, r25	; 0x12
    10b0:	89 8b       	std	Y+17, r24	; 0x11
    10b2:	89 89       	ldd	r24, Y+17	; 0x11
    10b4:	9a 89       	ldd	r25, Y+18	; 0x12
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <F_compare+0x23e>
    10ba:	9a 8b       	std	Y+18, r25	; 0x12
    10bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10be:	8b 89       	ldd	r24, Y+19	; 0x13
    10c0:	9c 89       	ldd	r25, Y+20	; 0x14
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	9c 8b       	std	Y+20, r25	; 0x14
    10c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c8:	8b 89       	ldd	r24, Y+19	; 0x13
    10ca:	9c 89       	ldd	r25, Y+20	; 0x14
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	69 f7       	brne	.-38     	; 0x10aa <F_compare+0x232>
    10d0:	14 c0       	rjmp	.+40     	; 0x10fa <F_compare+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d2:	6d 89       	ldd	r22, Y+21	; 0x15
    10d4:	7e 89       	ldd	r23, Y+22	; 0x16
    10d6:	8f 89       	ldd	r24, Y+23	; 0x17
    10d8:	98 8d       	ldd	r25, Y+24	; 0x18
    10da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	9c 8b       	std	Y+20, r25	; 0x14
    10e4:	8b 8b       	std	Y+19, r24	; 0x13
    10e6:	8b 89       	ldd	r24, Y+19	; 0x13
    10e8:	9c 89       	ldd	r25, Y+20	; 0x14
    10ea:	98 8b       	std	Y+16, r25	; 0x10
    10ec:	8f 87       	std	Y+15, r24	; 0x0f
    10ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    10f0:	98 89       	ldd	r25, Y+16	; 0x10
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <F_compare+0x27a>
    10f6:	98 8b       	std	Y+16, r25	; 0x10
    10f8:	8f 87       	std	Y+15, r24	; 0x0f
			 _delay_ms(10000);
			 LCD_sendCommand(CLEAR_COMMAND);
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e5       	ldi	r25, 0x50	; 80
    1104:	a3 ec       	ldi	r26, 0xC3	; 195
    1106:	b7 e4       	ldi	r27, 0x47	; 71
    1108:	8b 87       	std	Y+11, r24	; 0x0b
    110a:	9c 87       	std	Y+12, r25	; 0x0c
    110c:	ad 87       	std	Y+13, r26	; 0x0d
    110e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1110:	6b 85       	ldd	r22, Y+11	; 0x0b
    1112:	7c 85       	ldd	r23, Y+12	; 0x0c
    1114:	8d 85       	ldd	r24, Y+13	; 0x0d
    1116:	9e 85       	ldd	r25, Y+14	; 0x0e
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	4a e7       	ldi	r20, 0x7A	; 122
    111e:	53 e4       	ldi	r21, 0x43	; 67
    1120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	8f 83       	std	Y+7, r24	; 0x07
    112a:	98 87       	std	Y+8, r25	; 0x08
    112c:	a9 87       	std	Y+9, r26	; 0x09
    112e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1130:	6f 81       	ldd	r22, Y+7	; 0x07
    1132:	78 85       	ldd	r23, Y+8	; 0x08
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	9a 85       	ldd	r25, Y+10	; 0x0a
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	5f e3       	ldi	r21, 0x3F	; 63
    1140:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1144:	88 23       	and	r24, r24
    1146:	2c f4       	brge	.+10     	; 0x1152 <F_compare+0x2da>
		__ticks = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
    1150:	3f c0       	rjmp	.+126    	; 0x11d0 <F_compare+0x358>
	else if (__tmp > 65535)
    1152:	6f 81       	ldd	r22, Y+7	; 0x07
    1154:	78 85       	ldd	r23, Y+8	; 0x08
    1156:	89 85       	ldd	r24, Y+9	; 0x09
    1158:	9a 85       	ldd	r25, Y+10	; 0x0a
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	3f ef       	ldi	r19, 0xFF	; 255
    115e:	4f e7       	ldi	r20, 0x7F	; 127
    1160:	57 e4       	ldi	r21, 0x47	; 71
    1162:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1166:	18 16       	cp	r1, r24
    1168:	4c f5       	brge	.+82     	; 0x11bc <F_compare+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116a:	6b 85       	ldd	r22, Y+11	; 0x0b
    116c:	7c 85       	ldd	r23, Y+12	; 0x0c
    116e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1170:	9e 85       	ldd	r25, Y+14	; 0x0e
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e2       	ldi	r20, 0x20	; 32
    1178:	51 e4       	ldi	r21, 0x41	; 65
    117a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	9e 83       	std	Y+6, r25	; 0x06
    1190:	8d 83       	std	Y+5, r24	; 0x05
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <F_compare+0x33a>
    1194:	89 e1       	ldi	r24, 0x19	; 25
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	8b 83       	std	Y+3, r24	; 0x03
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <F_compare+0x328>
    11a4:	9c 83       	std	Y+4, r25	; 0x04
    11a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a8:	8d 81       	ldd	r24, Y+5	; 0x05
    11aa:	9e 81       	ldd	r25, Y+6	; 0x06
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	9e 83       	std	Y+6, r25	; 0x06
    11b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b2:	8d 81       	ldd	r24, Y+5	; 0x05
    11b4:	9e 81       	ldd	r25, Y+6	; 0x06
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	69 f7       	brne	.-38     	; 0x1194 <F_compare+0x31c>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <F_compare+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11bc:	6f 81       	ldd	r22, Y+7	; 0x07
    11be:	78 85       	ldd	r23, Y+8	; 0x08
    11c0:	89 85       	ldd	r24, Y+9	; 0x09
    11c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	9e 83       	std	Y+6, r25	; 0x06
    11ce:	8d 83       	std	Y+5, r24	; 0x05
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	9e 81       	ldd	r25, Y+6	; 0x06
    11d4:	9a 83       	std	Y+2, r25	; 0x02
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <F_compare+0x364>
    11e0:	9a 83       	std	Y+2, r25	; 0x02
    11e2:	89 83       	std	Y+1, r24	; 0x01
			 _delay_ms(100000);
			 z=0;
    11e4:	1e a6       	std	Y+46, r1	; 0x2e
    11e6:	1d a6       	std	Y+45, r1	; 0x2d
	return j;  /*this function compare each element in two arrays check if two are matched or not*/
}
void F_compare(uint8 new_pass[], uint8 match_pass[],char arr[],enum Ready R){
	int j ,z=0;
	j= compare(new_pass, match_pass);
	while (j!=5){
    11e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ea:	98 a9       	ldd	r25, Y+48	; 0x30
    11ec:	85 30       	cpi	r24, 0x05	; 5
    11ee:	91 05       	cpc	r25, r1
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <F_compare+0x37c>
    11f2:	61 ce       	rjmp	.-830    	; 0xeb6 <F_compare+0x3e>
			 LCD_sendCommand(CLEAR_COMMAND);
			 _delay_ms(100000);
			 z=0;
		}
	}
	if (j==5){
    11f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    11f6:	98 a9       	ldd	r25, Y+48	; 0x30
    11f8:	85 30       	cpi	r24, 0x05	; 5
    11fa:	91 05       	cpc	r25, r1
    11fc:	01 f5       	brne	.+64     	; 0x123e <F_compare+0x3c6>
	UART_sendByte(R);
    11fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1200:	0e 94 39 14 	call	0x2872	; 0x2872 <UART_sendByte>
	for (int i=0 ;i<5; i++){
    1204:	1c a6       	std	Y+44, r1	; 0x2c
    1206:	1b a6       	std	Y+43, r1	; 0x2b
    1208:	15 c0       	rjmp	.+42     	; 0x1234 <F_compare+0x3bc>
		while (UART_recieveByte()!=R);
    120a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <UART_recieveByte>
    120e:	98 2f       	mov	r25, r24
    1210:	8f a9       	ldd	r24, Y+55	; 0x37
    1212:	98 17       	cp	r25, r24
    1214:	d1 f7       	brne	.-12     	; 0x120a <F_compare+0x392>
		UART_sendByte(new_pass[i]);
    1216:	2b a5       	ldd	r18, Y+43	; 0x2b
    1218:	3c a5       	ldd	r19, Y+44	; 0x2c
    121a:	89 a9       	ldd	r24, Y+49	; 0x31
    121c:	9a a9       	ldd	r25, Y+50	; 0x32
    121e:	fc 01       	movw	r30, r24
    1220:	e2 0f       	add	r30, r18
    1222:	f3 1f       	adc	r31, r19
    1224:	80 81       	ld	r24, Z
    1226:	0e 94 39 14 	call	0x2872	; 0x2872 <UART_sendByte>
			 z=0;
		}
	}
	if (j==5){
	UART_sendByte(R);
	for (int i=0 ;i<5; i++){
    122a:	8b a5       	ldd	r24, Y+43	; 0x2b
    122c:	9c a5       	ldd	r25, Y+44	; 0x2c
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	9c a7       	std	Y+44, r25	; 0x2c
    1232:	8b a7       	std	Y+43, r24	; 0x2b
    1234:	8b a5       	ldd	r24, Y+43	; 0x2b
    1236:	9c a5       	ldd	r25, Y+44	; 0x2c
    1238:	85 30       	cpi	r24, 0x05	; 5
    123a:	91 05       	cpc	r25, r1
    123c:	34 f3       	brlt	.-52     	; 0x120a <F_compare+0x392>
		while (UART_recieveByte()!=R);
		UART_sendByte(new_pass[i]);

	}
	}
	}
    123e:	e7 96       	adiw	r28, 0x37	; 55
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <timer0_init_normal_mode>:
 */

#include "Timer0.h"
extern volatile uint8 second;
#if Mode == NORMAL_MODE
void timer0_init_normal_mode(uint8 prescaler , uint8 initial ){
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <timer0_init_normal_mode+0x6>
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	6a 83       	std	Y+2, r22	; 0x02
      intial :the value that the timer will start count from,
			it varies from 0 to 255.

	 */

	second=0;
    125e:	10 92 73 01 	sts	0x0173, r1
	SREG  |= (1<<7);    // global interrupt bit.
    1262:	af e5       	ldi	r26, 0x5F	; 95
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	ef e5       	ldi	r30, 0x5F	; 95
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	80 68       	ori	r24, 0x80	; 128
    126e:	8c 93       	st	X, r24
	TCNT0 = initial;  // the value that the timer will start count from.
    1270:	e2 e5       	ldi	r30, 0x52	; 82
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	80 83       	st	Z, r24
	TIMSK |= (1<<TOIE0);    // interrupt enable bit for Timer0 in normal mode.
    1278:	a9 e5       	ldi	r26, 0x59	; 89
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e9 e5       	ldi	r30, 0x59	; 89
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	81 60       	ori	r24, 0x01	; 1
    1284:	8c 93       	st	X, r24
	TCCR0 = (1<<FOC0);    // this bit is set to one for any non-PWM mode.
    1286:	e3 e5       	ldi	r30, 0x53	; 83
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 e8       	ldi	r24, 0x80	; 128
    128c:	80 83       	st	Z, r24
	TCCR0 = (TCCR0 & 0xF8) | (prescaler & 0x07);  // Prescaler.
    128e:	a3 e5       	ldi	r26, 0x53	; 83
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e3 e5       	ldi	r30, 0x53	; 83
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	98 2f       	mov	r25, r24
    129a:	98 7f       	andi	r25, 0xF8	; 248
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	87 70       	andi	r24, 0x07	; 7
    12a0:	89 2b       	or	r24, r25
    12a2:	8c 93       	st	X, r24
}
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <timer0_deinit>:
			TCCR0 = (TCCR0 & 0xF8) | (prescaler & 0x07) |(mode & 0x30);  // Prescaler and compare output mode non pwm

		}

#endif
void timer0_deinit(void){
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * This function is set to Deinit(stop) Time0.
	 */
	TCCR0 = 0;
    12b6:	e3 e5       	ldi	r30, 0x53	; 83
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	10 82       	st	Z, r1
}
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <KeyPad_getPressedKey+0x6>
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    12cc:	1a 82       	std	Y+2, r1	; 0x02
    12ce:	4c c0       	rjmp	.+152    	; 0x1368 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    12d0:	ea e3       	ldi	r30, 0x3A	; 58
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	80 e1       	ldi	r24, 0x10	; 16
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <KeyPad_getPressedKey+0x22>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	2a 95       	dec	r18
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <KeyPad_getPressedKey+0x1e>
    12e8:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    12ea:	eb e3       	ldi	r30, 0x3B	; 59
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	80 e1       	ldi	r24, 0x10	; 16
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <KeyPad_getPressedKey+0x3e>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <KeyPad_getPressedKey+0x3a>
    1304:	80 95       	com	r24
    1306:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    1308:	19 82       	std	Y+1, r1	; 0x01
    130a:	28 c0       	rjmp	.+80     	; 0x135c <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    130c:	e9 e3       	ldi	r30, 0x39	; 57
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	88 2f       	mov	r24, r24
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a9 01       	movw	r20, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <KeyPad_getPressedKey+0x62>
    1320:	55 95       	asr	r21
    1322:	47 95       	ror	r20
    1324:	8a 95       	dec	r24
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <KeyPad_getPressedKey+0x5e>
    1328:	ca 01       	movw	r24, r20
    132a:	81 70       	andi	r24, 0x01	; 1
    132c:	90 70       	andi	r25, 0x00	; 0
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	91 f4       	brne	.+36     	; 0x1356 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	98 2f       	mov	r25, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	89 0f       	add	r24, r25
    1346:	8f 5f       	subi	r24, 0xFF	; 255
    1348:	0e 94 b9 09 	call	0x1372	; 0x1372 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	8f 5f       	subi	r24, 0xFF	; 255
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	84 30       	cpi	r24, 0x04	; 4
    1360:	a8 f2       	brcs	.-86     	; 0x130c <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	8f 5f       	subi	r24, 0xFF	; 255
    1366:	8a 83       	std	Y+2, r24	; 0x02
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	84 30       	cpi	r24, 0x04	; 4
    136c:	08 f4       	brcc	.+2      	; 0x1370 <KeyPad_getPressedKey+0xae>
    136e:	b0 cf       	rjmp	.-160    	; 0x12d0 <KeyPad_getPressedKey+0xe>
    1370:	ad cf       	rjmp	.-166    	; 0x12cc <KeyPad_getPressedKey+0xa>

00001372 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <KeyPad_4x4_adjustKeyNumber+0x6>
    1378:	00 d0       	rcall	.+0      	; 0x137a <KeyPad_4x4_adjustKeyNumber+0x8>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	3c 83       	std	Y+4, r19	; 0x04
    1388:	2b 83       	std	Y+3, r18	; 0x03
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	9c 81       	ldd	r25, Y+4	; 0x04
    138e:	88 30       	cpi	r24, 0x08	; 8
    1390:	91 05       	cpc	r25, r1
    1392:	09 f4       	brne	.+2      	; 0x1396 <KeyPad_4x4_adjustKeyNumber+0x24>
    1394:	70 c0       	rjmp	.+224    	; 0x1476 <KeyPad_4x4_adjustKeyNumber+0x104>
    1396:	2b 81       	ldd	r18, Y+3	; 0x03
    1398:	3c 81       	ldd	r19, Y+4	; 0x04
    139a:	29 30       	cpi	r18, 0x09	; 9
    139c:	31 05       	cpc	r19, r1
    139e:	5c f5       	brge	.+86     	; 0x13f6 <KeyPad_4x4_adjustKeyNumber+0x84>
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	84 30       	cpi	r24, 0x04	; 4
    13a6:	91 05       	cpc	r25, r1
    13a8:	09 f4       	brne	.+2      	; 0x13ac <KeyPad_4x4_adjustKeyNumber+0x3a>
    13aa:	59 c0       	rjmp	.+178    	; 0x145e <KeyPad_4x4_adjustKeyNumber+0xec>
    13ac:	2b 81       	ldd	r18, Y+3	; 0x03
    13ae:	3c 81       	ldd	r19, Y+4	; 0x04
    13b0:	25 30       	cpi	r18, 0x05	; 5
    13b2:	31 05       	cpc	r19, r1
    13b4:	9c f4       	brge	.+38     	; 0x13dc <KeyPad_4x4_adjustKeyNumber+0x6a>
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	91 05       	cpc	r25, r1
    13be:	09 f4       	brne	.+2      	; 0x13c2 <KeyPad_4x4_adjustKeyNumber+0x50>
    13c0:	48 c0       	rjmp	.+144    	; 0x1452 <KeyPad_4x4_adjustKeyNumber+0xe0>
    13c2:	2b 81       	ldd	r18, Y+3	; 0x03
    13c4:	3c 81       	ldd	r19, Y+4	; 0x04
    13c6:	23 30       	cpi	r18, 0x03	; 3
    13c8:	31 05       	cpc	r19, r1
    13ca:	0c f0       	brlt	.+2      	; 0x13ce <KeyPad_4x4_adjustKeyNumber+0x5c>
    13cc:	45 c0       	rjmp	.+138    	; 0x1458 <KeyPad_4x4_adjustKeyNumber+0xe6>
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	91 05       	cpc	r25, r1
    13d6:	09 f4       	brne	.+2      	; 0x13da <KeyPad_4x4_adjustKeyNumber+0x68>
    13d8:	39 c0       	rjmp	.+114    	; 0x144c <KeyPad_4x4_adjustKeyNumber+0xda>
    13da:	67 c0       	rjmp	.+206    	; 0x14aa <KeyPad_4x4_adjustKeyNumber+0x138>
    13dc:	2b 81       	ldd	r18, Y+3	; 0x03
    13de:	3c 81       	ldd	r19, Y+4	; 0x04
    13e0:	26 30       	cpi	r18, 0x06	; 6
    13e2:	31 05       	cpc	r19, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <KeyPad_4x4_adjustKeyNumber+0x76>
    13e6:	41 c0       	rjmp	.+130    	; 0x146a <KeyPad_4x4_adjustKeyNumber+0xf8>
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	87 30       	cpi	r24, 0x07	; 7
    13ee:	91 05       	cpc	r25, r1
    13f0:	0c f0       	brlt	.+2      	; 0x13f4 <KeyPad_4x4_adjustKeyNumber+0x82>
    13f2:	3e c0       	rjmp	.+124    	; 0x1470 <KeyPad_4x4_adjustKeyNumber+0xfe>
    13f4:	37 c0       	rjmp	.+110    	; 0x1464 <KeyPad_4x4_adjustKeyNumber+0xf2>
    13f6:	2b 81       	ldd	r18, Y+3	; 0x03
    13f8:	3c 81       	ldd	r19, Y+4	; 0x04
    13fa:	2c 30       	cpi	r18, 0x0C	; 12
    13fc:	31 05       	cpc	r19, r1
    13fe:	09 f4       	brne	.+2      	; 0x1402 <KeyPad_4x4_adjustKeyNumber+0x90>
    1400:	46 c0       	rjmp	.+140    	; 0x148e <KeyPad_4x4_adjustKeyNumber+0x11c>
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	8d 30       	cpi	r24, 0x0D	; 13
    1408:	91 05       	cpc	r25, r1
    140a:	5c f4       	brge	.+22     	; 0x1422 <KeyPad_4x4_adjustKeyNumber+0xb0>
    140c:	2b 81       	ldd	r18, Y+3	; 0x03
    140e:	3c 81       	ldd	r19, Y+4	; 0x04
    1410:	2a 30       	cpi	r18, 0x0A	; 10
    1412:	31 05       	cpc	r19, r1
    1414:	b1 f1       	breq	.+108    	; 0x1482 <KeyPad_4x4_adjustKeyNumber+0x110>
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	8b 30       	cpi	r24, 0x0B	; 11
    141c:	91 05       	cpc	r25, r1
    141e:	a4 f5       	brge	.+104    	; 0x1488 <KeyPad_4x4_adjustKeyNumber+0x116>
    1420:	2d c0       	rjmp	.+90     	; 0x147c <KeyPad_4x4_adjustKeyNumber+0x10a>
    1422:	2b 81       	ldd	r18, Y+3	; 0x03
    1424:	3c 81       	ldd	r19, Y+4	; 0x04
    1426:	2e 30       	cpi	r18, 0x0E	; 14
    1428:	31 05       	cpc	r19, r1
    142a:	b9 f1       	breq	.+110    	; 0x149a <KeyPad_4x4_adjustKeyNumber+0x128>
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	8e 30       	cpi	r24, 0x0E	; 14
    1432:	91 05       	cpc	r25, r1
    1434:	7c f1       	brlt	.+94     	; 0x1494 <KeyPad_4x4_adjustKeyNumber+0x122>
    1436:	2b 81       	ldd	r18, Y+3	; 0x03
    1438:	3c 81       	ldd	r19, Y+4	; 0x04
    143a:	2f 30       	cpi	r18, 0x0F	; 15
    143c:	31 05       	cpc	r19, r1
    143e:	79 f1       	breq	.+94     	; 0x149e <KeyPad_4x4_adjustKeyNumber+0x12c>
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	80 31       	cpi	r24, 0x10	; 16
    1446:	91 05       	cpc	r25, r1
    1448:	69 f1       	breq	.+90     	; 0x14a4 <KeyPad_4x4_adjustKeyNumber+0x132>
    144a:	2f c0       	rjmp	.+94     	; 0x14aa <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    144c:	97 e0       	ldi	r25, 0x07	; 7
    144e:	9a 83       	std	Y+2, r25	; 0x02
    1450:	2e c0       	rjmp	.+92     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1452:	28 e0       	ldi	r18, 0x08	; 8
    1454:	2a 83       	std	Y+2, r18	; 0x02
    1456:	2b c0       	rjmp	.+86     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1458:	39 e0       	ldi	r19, 0x09	; 9
    145a:	3a 83       	std	Y+2, r19	; 0x02
    145c:	28 c0       	rjmp	.+80     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    145e:	85 e2       	ldi	r24, 0x25	; 37
    1460:	8a 83       	std	Y+2, r24	; 0x02
    1462:	25 c0       	rjmp	.+74     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1464:	94 e0       	ldi	r25, 0x04	; 4
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	22 c0       	rjmp	.+68     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    146a:	25 e0       	ldi	r18, 0x05	; 5
    146c:	2a 83       	std	Y+2, r18	; 0x02
    146e:	1f c0       	rjmp	.+62     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1470:	36 e0       	ldi	r19, 0x06	; 6
    1472:	3a 83       	std	Y+2, r19	; 0x02
    1474:	1c c0       	rjmp	.+56     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1476:	8a e2       	ldi	r24, 0x2A	; 42
    1478:	8a 83       	std	Y+2, r24	; 0x02
    147a:	19 c0       	rjmp	.+50     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    147c:	91 e0       	ldi	r25, 0x01	; 1
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	16 c0       	rjmp	.+44     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1482:	22 e0       	ldi	r18, 0x02	; 2
    1484:	2a 83       	std	Y+2, r18	; 0x02
    1486:	13 c0       	rjmp	.+38     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    1488:	33 e0       	ldi	r19, 0x03	; 3
    148a:	3a 83       	std	Y+2, r19	; 0x02
    148c:	10 c0       	rjmp	.+32     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    148e:	8d e2       	ldi	r24, 0x2D	; 45
    1490:	8a 83       	std	Y+2, r24	; 0x02
    1492:	0d c0       	rjmp	.+26     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1494:	9d e0       	ldi	r25, 0x0D	; 13
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	0a c0       	rjmp	.+20     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    149a:	1a 82       	std	Y+2, r1	; 0x02
    149c:	08 c0       	rjmp	.+16     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    149e:	2d e3       	ldi	r18, 0x3D	; 61
    14a0:	2a 83       	std	Y+2, r18	; 0x02
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    14a4:	3b e2       	ldi	r19, 0x2B	; 43
    14a6:	3a 83       	std	Y+2, r19	; 0x02
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	8a 83       	std	Y+2, r24	; 0x02
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    14c6:	a4 e3       	ldi	r26, 0x34	; 52
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e4 e3       	ldi	r30, 0x34	; 52
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	80 6e       	ori	r24, 0xE0	; 224
    14d2:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
    14d4:	e7 e3       	ldi	r30, 0x37	; 55
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	8f ef       	ldi	r24, 0xFF	; 255
    14da:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    14dc:	88 e3       	ldi	r24, 0x38	; 56
    14de:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    14e2:	8c e0       	ldi	r24, 0x0C	; 12
    14e4:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
}
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	e9 97       	sbiw	r28, 0x39	; 57
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    150a:	a5 e3       	ldi	r26, 0x35	; 53
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e5 e3       	ldi	r30, 0x35	; 53
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8f 7d       	andi	r24, 0xDF	; 223
    1516:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1518:	a5 e3       	ldi	r26, 0x35	; 53
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e5 e3       	ldi	r30, 0x35	; 53
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8f 7b       	andi	r24, 0xBF	; 191
    1524:	8c 93       	st	X, r24
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a0 e8       	ldi	r26, 0x80	; 128
    152c:	bf e3       	ldi	r27, 0x3F	; 63
    152e:	8d ab       	std	Y+53, r24	; 0x35
    1530:	9e ab       	std	Y+54, r25	; 0x36
    1532:	af ab       	std	Y+55, r26	; 0x37
    1534:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1536:	6d a9       	ldd	r22, Y+53	; 0x35
    1538:	7e a9       	ldd	r23, Y+54	; 0x36
    153a:	8f a9       	ldd	r24, Y+55	; 0x37
    153c:	98 ad       	ldd	r25, Y+56	; 0x38
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	4a e7       	ldi	r20, 0x7A	; 122
    1544:	53 e4       	ldi	r21, 0x43	; 67
    1546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	89 ab       	std	Y+49, r24	; 0x31
    1550:	9a ab       	std	Y+50, r25	; 0x32
    1552:	ab ab       	std	Y+51, r26	; 0x33
    1554:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1556:	69 a9       	ldd	r22, Y+49	; 0x31
    1558:	7a a9       	ldd	r23, Y+50	; 0x32
    155a:	8b a9       	ldd	r24, Y+51	; 0x33
    155c:	9c a9       	ldd	r25, Y+52	; 0x34
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e8       	ldi	r20, 0x80	; 128
    1564:	5f e3       	ldi	r21, 0x3F	; 63
    1566:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    156a:	88 23       	and	r24, r24
    156c:	2c f4       	brge	.+10     	; 0x1578 <LCD_sendCommand+0x84>
		__ticks = 1;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	98 ab       	std	Y+48, r25	; 0x30
    1574:	8f a7       	std	Y+47, r24	; 0x2f
    1576:	3f c0       	rjmp	.+126    	; 0x15f6 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1578:	69 a9       	ldd	r22, Y+49	; 0x31
    157a:	7a a9       	ldd	r23, Y+50	; 0x32
    157c:	8b a9       	ldd	r24, Y+51	; 0x33
    157e:	9c a9       	ldd	r25, Y+52	; 0x34
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	3f ef       	ldi	r19, 0xFF	; 255
    1584:	4f e7       	ldi	r20, 0x7F	; 127
    1586:	57 e4       	ldi	r21, 0x47	; 71
    1588:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    158c:	18 16       	cp	r1, r24
    158e:	4c f5       	brge	.+82     	; 0x15e2 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1590:	6d a9       	ldd	r22, Y+53	; 0x35
    1592:	7e a9       	ldd	r23, Y+54	; 0x36
    1594:	8f a9       	ldd	r24, Y+55	; 0x37
    1596:	98 ad       	ldd	r25, Y+56	; 0x38
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e2       	ldi	r20, 0x20	; 32
    159e:	51 e4       	ldi	r21, 0x41	; 65
    15a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	bc 01       	movw	r22, r24
    15aa:	cd 01       	movw	r24, r26
    15ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	98 ab       	std	Y+48, r25	; 0x30
    15b6:	8f a7       	std	Y+47, r24	; 0x2f
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <LCD_sendCommand+0xe4>
    15ba:	89 e1       	ldi	r24, 0x19	; 25
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9e a7       	std	Y+46, r25	; 0x2e
    15c0:	8d a7       	std	Y+45, r24	; 0x2d
    15c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    15c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <LCD_sendCommand+0xd2>
    15ca:	9e a7       	std	Y+46, r25	; 0x2e
    15cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    15d0:	98 a9       	ldd	r25, Y+48	; 0x30
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	98 ab       	std	Y+48, r25	; 0x30
    15d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15da:	98 a9       	ldd	r25, Y+48	; 0x30
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	69 f7       	brne	.-38     	; 0x15ba <LCD_sendCommand+0xc6>
    15e0:	14 c0       	rjmp	.+40     	; 0x160a <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e2:	69 a9       	ldd	r22, Y+49	; 0x31
    15e4:	7a a9       	ldd	r23, Y+50	; 0x32
    15e6:	8b a9       	ldd	r24, Y+51	; 0x33
    15e8:	9c a9       	ldd	r25, Y+52	; 0x34
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	98 ab       	std	Y+48, r25	; 0x30
    15f4:	8f a7       	std	Y+47, r24	; 0x2f
    15f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15f8:	98 a9       	ldd	r25, Y+48	; 0x30
    15fa:	9c a7       	std	Y+44, r25	; 0x2c
    15fc:	8b a7       	std	Y+43, r24	; 0x2b
    15fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1600:	9c a5       	ldd	r25, Y+44	; 0x2c
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <LCD_sendCommand+0x10e>
    1606:	9c a7       	std	Y+44, r25	; 0x2c
    1608:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    160a:	a5 e3       	ldi	r26, 0x35	; 53
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e5 e3       	ldi	r30, 0x35	; 53
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	80 68       	ori	r24, 0x80	; 128
    1616:	8c 93       	st	X, r24
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a0 e8       	ldi	r26, 0x80	; 128
    161e:	bf e3       	ldi	r27, 0x3F	; 63
    1620:	8f a3       	std	Y+39, r24	; 0x27
    1622:	98 a7       	std	Y+40, r25	; 0x28
    1624:	a9 a7       	std	Y+41, r26	; 0x29
    1626:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1628:	6f a1       	ldd	r22, Y+39	; 0x27
    162a:	78 a5       	ldd	r23, Y+40	; 0x28
    162c:	89 a5       	ldd	r24, Y+41	; 0x29
    162e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	4a e7       	ldi	r20, 0x7A	; 122
    1636:	53 e4       	ldi	r21, 0x43	; 67
    1638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	8b a3       	std	Y+35, r24	; 0x23
    1642:	9c a3       	std	Y+36, r25	; 0x24
    1644:	ad a3       	std	Y+37, r26	; 0x25
    1646:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1648:	6b a1       	ldd	r22, Y+35	; 0x23
    164a:	7c a1       	ldd	r23, Y+36	; 0x24
    164c:	8d a1       	ldd	r24, Y+37	; 0x25
    164e:	9e a1       	ldd	r25, Y+38	; 0x26
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e8       	ldi	r20, 0x80	; 128
    1656:	5f e3       	ldi	r21, 0x3F	; 63
    1658:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    165c:	88 23       	and	r24, r24
    165e:	2c f4       	brge	.+10     	; 0x166a <LCD_sendCommand+0x176>
		__ticks = 1;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	9a a3       	std	Y+34, r25	; 0x22
    1666:	89 a3       	std	Y+33, r24	; 0x21
    1668:	3f c0       	rjmp	.+126    	; 0x16e8 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    166a:	6b a1       	ldd	r22, Y+35	; 0x23
    166c:	7c a1       	ldd	r23, Y+36	; 0x24
    166e:	8d a1       	ldd	r24, Y+37	; 0x25
    1670:	9e a1       	ldd	r25, Y+38	; 0x26
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	57 e4       	ldi	r21, 0x47	; 71
    167a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    167e:	18 16       	cp	r1, r24
    1680:	4c f5       	brge	.+82     	; 0x16d4 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1682:	6f a1       	ldd	r22, Y+39	; 0x27
    1684:	78 a5       	ldd	r23, Y+40	; 0x28
    1686:	89 a5       	ldd	r24, Y+41	; 0x29
    1688:	9a a5       	ldd	r25, Y+42	; 0x2a
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e2       	ldi	r20, 0x20	; 32
    1690:	51 e4       	ldi	r21, 0x41	; 65
    1692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	9a a3       	std	Y+34, r25	; 0x22
    16a8:	89 a3       	std	Y+33, r24	; 0x21
    16aa:	0f c0       	rjmp	.+30     	; 0x16ca <LCD_sendCommand+0x1d6>
    16ac:	89 e1       	ldi	r24, 0x19	; 25
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	98 a3       	std	Y+32, r25	; 0x20
    16b2:	8f 8f       	std	Y+31, r24	; 0x1f
    16b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16b6:	98 a1       	ldd	r25, Y+32	; 0x20
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <LCD_sendCommand+0x1c4>
    16bc:	98 a3       	std	Y+32, r25	; 0x20
    16be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c0:	89 a1       	ldd	r24, Y+33	; 0x21
    16c2:	9a a1       	ldd	r25, Y+34	; 0x22
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	9a a3       	std	Y+34, r25	; 0x22
    16c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ca:	89 a1       	ldd	r24, Y+33	; 0x21
    16cc:	9a a1       	ldd	r25, Y+34	; 0x22
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	69 f7       	brne	.-38     	; 0x16ac <LCD_sendCommand+0x1b8>
    16d2:	14 c0       	rjmp	.+40     	; 0x16fc <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d4:	6b a1       	ldd	r22, Y+35	; 0x23
    16d6:	7c a1       	ldd	r23, Y+36	; 0x24
    16d8:	8d a1       	ldd	r24, Y+37	; 0x25
    16da:	9e a1       	ldd	r25, Y+38	; 0x26
    16dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	9a a3       	std	Y+34, r25	; 0x22
    16e6:	89 a3       	std	Y+33, r24	; 0x21
    16e8:	89 a1       	ldd	r24, Y+33	; 0x21
    16ea:	9a a1       	ldd	r25, Y+34	; 0x22
    16ec:	9e 8f       	std	Y+30, r25	; 0x1e
    16ee:	8d 8f       	std	Y+29, r24	; 0x1d
    16f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <LCD_sendCommand+0x200>
    16f8:	9e 8f       	std	Y+30, r25	; 0x1e
    16fa:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    16fc:	e8 e3       	ldi	r30, 0x38	; 56
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	89 ad       	ldd	r24, Y+57	; 0x39
    1702:	80 83       	st	Z, r24
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a0 e8       	ldi	r26, 0x80	; 128
    170a:	bf e3       	ldi	r27, 0x3F	; 63
    170c:	89 8f       	std	Y+25, r24	; 0x19
    170e:	9a 8f       	std	Y+26, r25	; 0x1a
    1710:	ab 8f       	std	Y+27, r26	; 0x1b
    1712:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1714:	69 8d       	ldd	r22, Y+25	; 0x19
    1716:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1718:	8b 8d       	ldd	r24, Y+27	; 0x1b
    171a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	4a e7       	ldi	r20, 0x7A	; 122
    1722:	53 e4       	ldi	r21, 0x43	; 67
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	8d 8b       	std	Y+21, r24	; 0x15
    172e:	9e 8b       	std	Y+22, r25	; 0x16
    1730:	af 8b       	std	Y+23, r26	; 0x17
    1732:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1734:	6d 89       	ldd	r22, Y+21	; 0x15
    1736:	7e 89       	ldd	r23, Y+22	; 0x16
    1738:	8f 89       	ldd	r24, Y+23	; 0x17
    173a:	98 8d       	ldd	r25, Y+24	; 0x18
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e8       	ldi	r20, 0x80	; 128
    1742:	5f e3       	ldi	r21, 0x3F	; 63
    1744:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1748:	88 23       	and	r24, r24
    174a:	2c f4       	brge	.+10     	; 0x1756 <LCD_sendCommand+0x262>
		__ticks = 1;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	9c 8b       	std	Y+20, r25	; 0x14
    1752:	8b 8b       	std	Y+19, r24	; 0x13
    1754:	3f c0       	rjmp	.+126    	; 0x17d4 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1756:	6d 89       	ldd	r22, Y+21	; 0x15
    1758:	7e 89       	ldd	r23, Y+22	; 0x16
    175a:	8f 89       	ldd	r24, Y+23	; 0x17
    175c:	98 8d       	ldd	r25, Y+24	; 0x18
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	3f ef       	ldi	r19, 0xFF	; 255
    1762:	4f e7       	ldi	r20, 0x7F	; 127
    1764:	57 e4       	ldi	r21, 0x47	; 71
    1766:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    176a:	18 16       	cp	r1, r24
    176c:	4c f5       	brge	.+82     	; 0x17c0 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176e:	69 8d       	ldd	r22, Y+25	; 0x19
    1770:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1772:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1774:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e2       	ldi	r20, 0x20	; 32
    177c:	51 e4       	ldi	r21, 0x41	; 65
    177e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	bc 01       	movw	r22, r24
    1788:	cd 01       	movw	r24, r26
    178a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	9c 8b       	std	Y+20, r25	; 0x14
    1794:	8b 8b       	std	Y+19, r24	; 0x13
    1796:	0f c0       	rjmp	.+30     	; 0x17b6 <LCD_sendCommand+0x2c2>
    1798:	89 e1       	ldi	r24, 0x19	; 25
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	9a 8b       	std	Y+18, r25	; 0x12
    179e:	89 8b       	std	Y+17, r24	; 0x11
    17a0:	89 89       	ldd	r24, Y+17	; 0x11
    17a2:	9a 89       	ldd	r25, Y+18	; 0x12
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <LCD_sendCommand+0x2b0>
    17a8:	9a 8b       	std	Y+18, r25	; 0x12
    17aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ac:	8b 89       	ldd	r24, Y+19	; 0x13
    17ae:	9c 89       	ldd	r25, Y+20	; 0x14
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	9c 8b       	std	Y+20, r25	; 0x14
    17b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b6:	8b 89       	ldd	r24, Y+19	; 0x13
    17b8:	9c 89       	ldd	r25, Y+20	; 0x14
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	69 f7       	brne	.-38     	; 0x1798 <LCD_sendCommand+0x2a4>
    17be:	14 c0       	rjmp	.+40     	; 0x17e8 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c0:	6d 89       	ldd	r22, Y+21	; 0x15
    17c2:	7e 89       	ldd	r23, Y+22	; 0x16
    17c4:	8f 89       	ldd	r24, Y+23	; 0x17
    17c6:	98 8d       	ldd	r25, Y+24	; 0x18
    17c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	9c 8b       	std	Y+20, r25	; 0x14
    17d2:	8b 8b       	std	Y+19, r24	; 0x13
    17d4:	8b 89       	ldd	r24, Y+19	; 0x13
    17d6:	9c 89       	ldd	r25, Y+20	; 0x14
    17d8:	98 8b       	std	Y+16, r25	; 0x10
    17da:	8f 87       	std	Y+15, r24	; 0x0f
    17dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    17de:	98 89       	ldd	r25, Y+16	; 0x10
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <LCD_sendCommand+0x2ec>
    17e4:	98 8b       	std	Y+16, r25	; 0x10
    17e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    17e8:	a5 e3       	ldi	r26, 0x35	; 53
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e5 e3       	ldi	r30, 0x35	; 53
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	8f 77       	andi	r24, 0x7F	; 127
    17f4:	8c 93       	st	X, r24
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a0 e8       	ldi	r26, 0x80	; 128
    17fc:	bf e3       	ldi	r27, 0x3F	; 63
    17fe:	8b 87       	std	Y+11, r24	; 0x0b
    1800:	9c 87       	std	Y+12, r25	; 0x0c
    1802:	ad 87       	std	Y+13, r26	; 0x0d
    1804:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	6b 85       	ldd	r22, Y+11	; 0x0b
    1808:	7c 85       	ldd	r23, Y+12	; 0x0c
    180a:	8d 85       	ldd	r24, Y+13	; 0x0d
    180c:	9e 85       	ldd	r25, Y+14	; 0x0e
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a e7       	ldi	r20, 0x7A	; 122
    1814:	53 e4       	ldi	r21, 0x43	; 67
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8f 83       	std	Y+7, r24	; 0x07
    1820:	98 87       	std	Y+8, r25	; 0x08
    1822:	a9 87       	std	Y+9, r26	; 0x09
    1824:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1826:	6f 81       	ldd	r22, Y+7	; 0x07
    1828:	78 85       	ldd	r23, Y+8	; 0x08
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <LCD_sendCommand+0x354>
		__ticks = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	4c f5       	brge	.+82     	; 0x18b2 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	6b 85       	ldd	r22, Y+11	; 0x0b
    1862:	7c 85       	ldd	r23, Y+12	; 0x0c
    1864:	8d 85       	ldd	r24, Y+13	; 0x0d
    1866:	9e 85       	ldd	r25, Y+14	; 0x0e
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <LCD_sendCommand+0x3b4>
    188a:	89 e1       	ldi	r24, 0x19	; 25
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9c 83       	std	Y+4, r25	; 0x04
    1890:	8b 83       	std	Y+3, r24	; 0x03
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	9c 81       	ldd	r25, Y+4	; 0x04
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <LCD_sendCommand+0x3a2>
    189a:	9c 83       	std	Y+4, r25	; 0x04
    189c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f7       	brne	.-38     	; 0x188a <LCD_sendCommand+0x396>
    18b0:	14 c0       	rjmp	.+40     	; 0x18da <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	6f 81       	ldd	r22, Y+7	; 0x07
    18b4:	78 85       	ldd	r23, Y+8	; 0x08
    18b6:	89 85       	ldd	r24, Y+9	; 0x09
    18b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	9a 81       	ldd	r25, Y+2	; 0x02
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCD_sendCommand+0x3de>
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    18da:	e9 96       	adiw	r28, 0x39	; 57
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	e9 97       	sbiw	r28, 0x39	; 57
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1902:	a5 e3       	ldi	r26, 0x35	; 53
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e5 e3       	ldi	r30, 0x35	; 53
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	80 62       	ori	r24, 0x20	; 32
    190e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1910:	a5 e3       	ldi	r26, 0x35	; 53
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e5 e3       	ldi	r30, 0x35	; 53
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	8f 7b       	andi	r24, 0xBF	; 191
    191c:	8c 93       	st	X, r24
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	a0 e8       	ldi	r26, 0x80	; 128
    1924:	bf e3       	ldi	r27, 0x3F	; 63
    1926:	8d ab       	std	Y+53, r24	; 0x35
    1928:	9e ab       	std	Y+54, r25	; 0x36
    192a:	af ab       	std	Y+55, r26	; 0x37
    192c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192e:	6d a9       	ldd	r22, Y+53	; 0x35
    1930:	7e a9       	ldd	r23, Y+54	; 0x36
    1932:	8f a9       	ldd	r24, Y+55	; 0x37
    1934:	98 ad       	ldd	r25, Y+56	; 0x38
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	4a e7       	ldi	r20, 0x7A	; 122
    193c:	53 e4       	ldi	r21, 0x43	; 67
    193e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	89 ab       	std	Y+49, r24	; 0x31
    1948:	9a ab       	std	Y+50, r25	; 0x32
    194a:	ab ab       	std	Y+51, r26	; 0x33
    194c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    194e:	69 a9       	ldd	r22, Y+49	; 0x31
    1950:	7a a9       	ldd	r23, Y+50	; 0x32
    1952:	8b a9       	ldd	r24, Y+51	; 0x33
    1954:	9c a9       	ldd	r25, Y+52	; 0x34
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e8       	ldi	r20, 0x80	; 128
    195c:	5f e3       	ldi	r21, 0x3F	; 63
    195e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1962:	88 23       	and	r24, r24
    1964:	2c f4       	brge	.+10     	; 0x1970 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	98 ab       	std	Y+48, r25	; 0x30
    196c:	8f a7       	std	Y+47, r24	; 0x2f
    196e:	3f c0       	rjmp	.+126    	; 0x19ee <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1970:	69 a9       	ldd	r22, Y+49	; 0x31
    1972:	7a a9       	ldd	r23, Y+50	; 0x32
    1974:	8b a9       	ldd	r24, Y+51	; 0x33
    1976:	9c a9       	ldd	r25, Y+52	; 0x34
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	3f ef       	ldi	r19, 0xFF	; 255
    197c:	4f e7       	ldi	r20, 0x7F	; 127
    197e:	57 e4       	ldi	r21, 0x47	; 71
    1980:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1984:	18 16       	cp	r1, r24
    1986:	4c f5       	brge	.+82     	; 0x19da <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1988:	6d a9       	ldd	r22, Y+53	; 0x35
    198a:	7e a9       	ldd	r23, Y+54	; 0x36
    198c:	8f a9       	ldd	r24, Y+55	; 0x37
    198e:	98 ad       	ldd	r25, Y+56	; 0x38
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e2       	ldi	r20, 0x20	; 32
    1996:	51 e4       	ldi	r21, 0x41	; 65
    1998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	98 ab       	std	Y+48, r25	; 0x30
    19ae:	8f a7       	std	Y+47, r24	; 0x2f
    19b0:	0f c0       	rjmp	.+30     	; 0x19d0 <LCD_displayCharacter+0xe4>
    19b2:	89 e1       	ldi	r24, 0x19	; 25
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	9e a7       	std	Y+46, r25	; 0x2e
    19b8:	8d a7       	std	Y+45, r24	; 0x2d
    19ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    19bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <LCD_displayCharacter+0xd2>
    19c2:	9e a7       	std	Y+46, r25	; 0x2e
    19c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c8:	98 a9       	ldd	r25, Y+48	; 0x30
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	98 ab       	std	Y+48, r25	; 0x30
    19ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d2:	98 a9       	ldd	r25, Y+48	; 0x30
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	69 f7       	brne	.-38     	; 0x19b2 <LCD_displayCharacter+0xc6>
    19d8:	14 c0       	rjmp	.+40     	; 0x1a02 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19da:	69 a9       	ldd	r22, Y+49	; 0x31
    19dc:	7a a9       	ldd	r23, Y+50	; 0x32
    19de:	8b a9       	ldd	r24, Y+51	; 0x33
    19e0:	9c a9       	ldd	r25, Y+52	; 0x34
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	98 ab       	std	Y+48, r25	; 0x30
    19ec:	8f a7       	std	Y+47, r24	; 0x2f
    19ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    19f0:	98 a9       	ldd	r25, Y+48	; 0x30
    19f2:	9c a7       	std	Y+44, r25	; 0x2c
    19f4:	8b a7       	std	Y+43, r24	; 0x2b
    19f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    19f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <LCD_displayCharacter+0x10e>
    19fe:	9c a7       	std	Y+44, r25	; 0x2c
    1a00:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1a02:	a5 e3       	ldi	r26, 0x35	; 53
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e5 e3       	ldi	r30, 0x35	; 53
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	80 68       	ori	r24, 0x80	; 128
    1a0e:	8c 93       	st	X, r24
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a0 e8       	ldi	r26, 0x80	; 128
    1a16:	bf e3       	ldi	r27, 0x3F	; 63
    1a18:	8f a3       	std	Y+39, r24	; 0x27
    1a1a:	98 a7       	std	Y+40, r25	; 0x28
    1a1c:	a9 a7       	std	Y+41, r26	; 0x29
    1a1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a20:	6f a1       	ldd	r22, Y+39	; 0x27
    1a22:	78 a5       	ldd	r23, Y+40	; 0x28
    1a24:	89 a5       	ldd	r24, Y+41	; 0x29
    1a26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	4a e7       	ldi	r20, 0x7A	; 122
    1a2e:	53 e4       	ldi	r21, 0x43	; 67
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	8b a3       	std	Y+35, r24	; 0x23
    1a3a:	9c a3       	std	Y+36, r25	; 0x24
    1a3c:	ad a3       	std	Y+37, r26	; 0x25
    1a3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a40:	6b a1       	ldd	r22, Y+35	; 0x23
    1a42:	7c a1       	ldd	r23, Y+36	; 0x24
    1a44:	8d a1       	ldd	r24, Y+37	; 0x25
    1a46:	9e a1       	ldd	r25, Y+38	; 0x26
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	5f e3       	ldi	r21, 0x3F	; 63
    1a50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a54:	88 23       	and	r24, r24
    1a56:	2c f4       	brge	.+10     	; 0x1a62 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9a a3       	std	Y+34, r25	; 0x22
    1a5e:	89 a3       	std	Y+33, r24	; 0x21
    1a60:	3f c0       	rjmp	.+126    	; 0x1ae0 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1a62:	6b a1       	ldd	r22, Y+35	; 0x23
    1a64:	7c a1       	ldd	r23, Y+36	; 0x24
    1a66:	8d a1       	ldd	r24, Y+37	; 0x25
    1a68:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	57 e4       	ldi	r21, 0x47	; 71
    1a72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	4c f5       	brge	.+82     	; 0x1acc <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e2       	ldi	r20, 0x20	; 32
    1a88:	51 e4       	ldi	r21, 0x41	; 65
    1a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9a a3       	std	Y+34, r25	; 0x22
    1aa0:	89 a3       	std	Y+33, r24	; 0x21
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <LCD_displayCharacter+0x1d6>
    1aa4:	89 e1       	ldi	r24, 0x19	; 25
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	98 a3       	std	Y+32, r25	; 0x20
    1aaa:	8f 8f       	std	Y+31, r24	; 0x1f
    1aac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aae:	98 a1       	ldd	r25, Y+32	; 0x20
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <LCD_displayCharacter+0x1c4>
    1ab4:	98 a3       	std	Y+32, r25	; 0x20
    1ab6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aba:	9a a1       	ldd	r25, Y+34	; 0x22
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	9a a3       	std	Y+34, r25	; 0x22
    1ac0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	69 f7       	brne	.-38     	; 0x1aa4 <LCD_displayCharacter+0x1b8>
    1aca:	14 c0       	rjmp	.+40     	; 0x1af4 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1acc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ace:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9a a3       	std	Y+34, r25	; 0x22
    1ade:	89 a3       	std	Y+33, r24	; 0x21
    1ae0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ae8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <LCD_displayCharacter+0x200>
    1af0:	9e 8f       	std	Y+30, r25	; 0x1e
    1af2:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    1af4:	e8 e3       	ldi	r30, 0x38	; 56
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	89 ad       	ldd	r24, Y+57	; 0x39
    1afa:	80 83       	st	Z, r24
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a0 e8       	ldi	r26, 0x80	; 128
    1b02:	bf e3       	ldi	r27, 0x3F	; 63
    1b04:	89 8f       	std	Y+25, r24	; 0x19
    1b06:	9a 8f       	std	Y+26, r25	; 0x1a
    1b08:	ab 8f       	std	Y+27, r26	; 0x1b
    1b0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	4a e7       	ldi	r20, 0x7A	; 122
    1b1a:	53 e4       	ldi	r21, 0x43	; 67
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	8d 8b       	std	Y+21, r24	; 0x15
    1b26:	9e 8b       	std	Y+22, r25	; 0x16
    1b28:	af 8b       	std	Y+23, r26	; 0x17
    1b2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b30:	8f 89       	ldd	r24, Y+23	; 0x17
    1b32:	98 8d       	ldd	r25, Y+24	; 0x18
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e8       	ldi	r20, 0x80	; 128
    1b3a:	5f e3       	ldi	r21, 0x3F	; 63
    1b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b40:	88 23       	and	r24, r24
    1b42:	2c f4       	brge	.+10     	; 0x1b4e <LCD_displayCharacter+0x262>
		__ticks = 1;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9c 8b       	std	Y+20, r25	; 0x14
    1b4a:	8b 8b       	std	Y+19, r24	; 0x13
    1b4c:	3f c0       	rjmp	.+126    	; 0x1bcc <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b50:	7e 89       	ldd	r23, Y+22	; 0x16
    1b52:	8f 89       	ldd	r24, Y+23	; 0x17
    1b54:	98 8d       	ldd	r25, Y+24	; 0x18
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	3f ef       	ldi	r19, 0xFF	; 255
    1b5a:	4f e7       	ldi	r20, 0x7F	; 127
    1b5c:	57 e4       	ldi	r21, 0x47	; 71
    1b5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b62:	18 16       	cp	r1, r24
    1b64:	4c f5       	brge	.+82     	; 0x1bb8 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b66:	69 8d       	ldd	r22, Y+25	; 0x19
    1b68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e2       	ldi	r20, 0x20	; 32
    1b74:	51 e4       	ldi	r21, 0x41	; 65
    1b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	9c 8b       	std	Y+20, r25	; 0x14
    1b8c:	8b 8b       	std	Y+19, r24	; 0x13
    1b8e:	0f c0       	rjmp	.+30     	; 0x1bae <LCD_displayCharacter+0x2c2>
    1b90:	89 e1       	ldi	r24, 0x19	; 25
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	9a 8b       	std	Y+18, r25	; 0x12
    1b96:	89 8b       	std	Y+17, r24	; 0x11
    1b98:	89 89       	ldd	r24, Y+17	; 0x11
    1b9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <LCD_displayCharacter+0x2b0>
    1ba0:	9a 8b       	std	Y+18, r25	; 0x12
    1ba2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	9c 8b       	std	Y+20, r25	; 0x14
    1bac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bae:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	69 f7       	brne	.-38     	; 0x1b90 <LCD_displayCharacter+0x2a4>
    1bb6:	14 c0       	rjmp	.+40     	; 0x1be0 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bba:	7e 89       	ldd	r23, Y+22	; 0x16
    1bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9c 8b       	std	Y+20, r25	; 0x14
    1bca:	8b 8b       	std	Y+19, r24	; 0x13
    1bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bce:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd0:	98 8b       	std	Y+16, r25	; 0x10
    1bd2:	8f 87       	std	Y+15, r24	; 0x0f
    1bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd6:	98 89       	ldd	r25, Y+16	; 0x10
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <LCD_displayCharacter+0x2ec>
    1bdc:	98 8b       	std	Y+16, r25	; 0x10
    1bde:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1be0:	a5 e3       	ldi	r26, 0x35	; 53
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e5 e3       	ldi	r30, 0x35	; 53
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	8f 77       	andi	r24, 0x7F	; 127
    1bec:	8c 93       	st	X, r24
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a0 e8       	ldi	r26, 0x80	; 128
    1bf4:	bf e3       	ldi	r27, 0x3F	; 63
    1bf6:	8b 87       	std	Y+11, r24	; 0x0b
    1bf8:	9c 87       	std	Y+12, r25	; 0x0c
    1bfa:	ad 87       	std	Y+13, r26	; 0x0d
    1bfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4a e7       	ldi	r20, 0x7A	; 122
    1c0c:	53 e4       	ldi	r21, 0x43	; 67
    1c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8f 83       	std	Y+7, r24	; 0x07
    1c18:	98 87       	std	Y+8, r25	; 0x08
    1c1a:	a9 87       	std	Y+9, r26	; 0x09
    1c1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c20:	78 85       	ldd	r23, Y+8	; 0x08
    1c22:	89 85       	ldd	r24, Y+9	; 0x09
    1c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9e 83       	std	Y+6, r25	; 0x06
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
    1c3e:	3f c0       	rjmp	.+126    	; 0x1cbe <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	4f e7       	ldi	r20, 0x7F	; 127
    1c4e:	57 e4       	ldi	r21, 0x47	; 71
    1c50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f5       	brge	.+82     	; 0x1caa <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <LCD_displayCharacter+0x3b4>
    1c82:	89 e1       	ldi	r24, 0x19	; 25
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <LCD_displayCharacter+0x3a2>
    1c92:	9c 83       	std	Y+4, r25	; 0x04
    1c94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <LCD_displayCharacter+0x396>
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cac:	78 85       	ldd	r23, Y+8	; 0x08
    1cae:	89 85       	ldd	r24, Y+9	; 0x09
    1cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <LCD_displayCharacter+0x3de>
    1cce:	9a 83       	std	Y+2, r25	; 0x02
    1cd0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1cd2:	e9 96       	adiw	r28, 0x39	; 57
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <LCD_displayString+0x6>
    1cea:	0f 92       	push	r0
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	9b 83       	std	Y+3, r25	; 0x03
    1cf2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1cf4:	19 82       	std	Y+1, r1	; 0x01
    1cf6:	0e c0       	rjmp	.+28     	; 0x1d14 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	9b 81       	ldd	r25, Y+3	; 0x03
    1d02:	fc 01       	movw	r30, r24
    1d04:	e2 0f       	add	r30, r18
    1d06:	f3 1f       	adc	r31, r19
    1d08:	80 81       	ld	r24, Z
    1d0a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LCD_displayCharacter>
		i++;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	8f 5f       	subi	r24, 0xFF	; 255
    1d12:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1e:	fc 01       	movw	r30, r24
    1d20:	e2 0f       	add	r30, r18
    1d22:	f3 1f       	adc	r31, r19
    1d24:	80 81       	ld	r24, Z
    1d26:	88 23       	and	r24, r24
    1d28:	39 f7       	brne	.-50     	; 0x1cf8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <LCD_goToRowColumn+0x6>
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <LCD_goToRowColumn+0x8>
    1d3e:	0f 92       	push	r0
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	8a 83       	std	Y+2, r24	; 0x02
    1d46:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	3d 83       	std	Y+5, r19	; 0x05
    1d50:	2c 83       	std	Y+4, r18	; 0x04
    1d52:	8c 81       	ldd	r24, Y+4	; 0x04
    1d54:	9d 81       	ldd	r25, Y+5	; 0x05
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	91 05       	cpc	r25, r1
    1d5a:	c1 f0       	breq	.+48     	; 0x1d8c <LCD_goToRowColumn+0x56>
    1d5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	31 05       	cpc	r19, r1
    1d64:	2c f4       	brge	.+10     	; 0x1d70 <LCD_goToRowColumn+0x3a>
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	61 f0       	breq	.+24     	; 0x1d86 <LCD_goToRowColumn+0x50>
    1d6e:	19 c0       	rjmp	.+50     	; 0x1da2 <LCD_goToRowColumn+0x6c>
    1d70:	2c 81       	ldd	r18, Y+4	; 0x04
    1d72:	3d 81       	ldd	r19, Y+5	; 0x05
    1d74:	22 30       	cpi	r18, 0x02	; 2
    1d76:	31 05       	cpc	r19, r1
    1d78:	69 f0       	breq	.+26     	; 0x1d94 <LCD_goToRowColumn+0x5e>
    1d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7e:	83 30       	cpi	r24, 0x03	; 3
    1d80:	91 05       	cpc	r25, r1
    1d82:	61 f0       	breq	.+24     	; 0x1d9c <LCD_goToRowColumn+0x66>
    1d84:	0e c0       	rjmp	.+28     	; 0x1da2 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	0b c0       	rjmp	.+22     	; 0x1da2 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	80 5c       	subi	r24, 0xC0	; 192
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	07 c0       	rjmp	.+14     	; 0x1da2 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	80 5f       	subi	r24, 0xF0	; 240
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	03 c0       	rjmp	.+6      	; 0x1da2 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	80 5b       	subi	r24, 0xB0	; 176
    1da0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	80 68       	ori	r24, 0x80	; 128
    1da6:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
}
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <LCD_displayStringRowColumn+0x6>
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <LCD_displayStringRowColumn+0x8>
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	6a 83       	std	Y+2, r22	; 0x02
    1dca:	5c 83       	std	Y+4, r21	; 0x04
    1dcc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	6a 81       	ldd	r22, Y+2	; 0x02
    1dd2:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
}
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	62 97       	sbiw	r28, 0x12	; 18
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	9a 8b       	std	Y+18, r25	; 0x12
    1e02:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1e04:	89 89       	ldd	r24, Y+17	; 0x11
    1e06:	9a 89       	ldd	r25, Y+18	; 0x12
    1e08:	9e 01       	movw	r18, r28
    1e0a:	2f 5f       	subi	r18, 0xFF	; 255
    1e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0e:	b9 01       	movw	r22, r18
    1e10:	4a e0       	ldi	r20, 0x0A	; 10
    1e12:	50 e0       	ldi	r21, 0x00	; 0
    1e14:	0e 94 04 15 	call	0x2a08	; 0x2a08 <itoa>
   LCD_displayString(buff);
    1e18:	ce 01       	movw	r24, r28
    1e1a:	01 96       	adiw	r24, 0x01	; 1
    1e1c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LCD_displayString>
}
    1e20:	62 96       	adiw	r28, 0x12	; 18
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
}
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <__vector_9>:
 * so put initial timer counter=5   5 --> 255 (0.25 sec per overflow)
 * so we need timer to overflow 4 times to get a 1 second
 * This is the ISR of timer0 overflow mode
 */
ISR(TIMER0_OVF_vect)
{
    1e46:	1f 92       	push	r1
    1e48:	0f 92       	push	r0
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	0f 92       	push	r0
    1e4e:	11 24       	eor	r1, r1
    1e50:	8f 93       	push	r24
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1e5a:	80 91 72 01 	lds	r24, 0x0172
    1e5e:	8f 5f       	subi	r24, 0xFF	; 255
    1e60:	80 93 72 01 	sts	0x0172, r24
	if (g_tick ==Overflow_num)
    1e64:	80 91 72 01 	lds	r24, 0x0172
    1e68:	84 30       	cpi	r24, 0x04	; 4
    1e6a:	39 f4       	brne	.+14     	; 0x1e7a <__vector_9+0x34>
	{
		second++;
    1e6c:	80 91 73 01 	lds	r24, 0x0173
    1e70:	8f 5f       	subi	r24, 0xFF	; 255
    1e72:	80 93 73 01 	sts	0x0173, r24
		g_tick = 0;
    1e76:	10 92 72 01 	sts	0x0172, r1
	}
}
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	8f 91       	pop	r24
    1e80:	0f 90       	pop	r0
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	0f 90       	pop	r0
    1e86:	1f 90       	pop	r1
    1e88:	18 95       	reti

00001e8a <main>:


//START OF MAIN FUNCTION

int main(void)
{
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	c0 58       	subi	r28, 0x80	; 128
    1e98:	d0 40       	sbci	r29, 0x00	; 0
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61

	uint8 i,key
	,new_pass[7],match_pass[7],old_pass[7],match_pass2[7];

	//init lcd
	LCD_init();
    1ea4:	0e 94 5f 0a 	call	0x14be	; 0x14be <LCD_init>

	//init uart
	UART_init();
    1ea8:	0e 94 16 14 	call	0x282c	; 0x282c <UART_init>
	LCD_sendCommand(CLEAR_COMMAND);
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
	LCD_displayStringRowColumn(0,0,"LCD Active");
    1eb2:	2f ea       	ldi	r18, 0xAF	; 175
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	a9 01       	movw	r20, r18
    1ebc:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_displayStringRowColumn>
	/* These statements for first password for new user just one time
	 * second MCU  don't have to check for any stranger
	 * as my user is new , there is no reserved data in E2PROM
	 */

	get_pass("Enter Pass", new_pass);
    1ec0:	8a eb       	ldi	r24, 0xBA	; 186
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9e 01       	movw	r18, r28
    1ec6:	2b 59       	subi	r18, 0x9B	; 155
    1ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eca:	b9 01       	movw	r22, r18
    1ecc:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_pass>
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e1 5a       	subi	r30, 0xA1	; 161
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e2       	ldi	r26, 0x20	; 32
    1edc:	b1 e4       	ldi	r27, 0x41	; 65
    1ede:	80 83       	st	Z, r24
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	a2 83       	std	Z+2, r26	; 0x02
    1ee4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee6:	8e 01       	movw	r16, r28
    1ee8:	05 5a       	subi	r16, 0xA5	; 165
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	fe 01       	movw	r30, r28
    1eee:	e1 5a       	subi	r30, 0xA1	; 161
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	60 81       	ld	r22, Z
    1ef4:	71 81       	ldd	r23, Z+1	; 0x01
    1ef6:	82 81       	ldd	r24, Z+2	; 0x02
    1ef8:	93 81       	ldd	r25, Z+3	; 0x03
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	4a e7       	ldi	r20, 0x7A	; 122
    1f00:	53 e4       	ldi	r21, 0x43	; 67
    1f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	f8 01       	movw	r30, r16
    1f0c:	80 83       	st	Z, r24
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	a2 83       	std	Z+2, r26	; 0x02
    1f12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f14:	fe 01       	movw	r30, r28
    1f16:	e5 5a       	subi	r30, 0xA5	; 165
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	60 81       	ld	r22, Z
    1f1c:	71 81       	ldd	r23, Z+1	; 0x01
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e8       	ldi	r20, 0x80	; 128
    1f28:	5f e3       	ldi	r21, 0x3F	; 63
    1f2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	44 f4       	brge	.+16     	; 0x1f42 <main+0xb8>
		__ticks = 1;
    1f32:	fe 01       	movw	r30, r28
    1f34:	e7 5a       	subi	r30, 0xA7	; 167
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	80 83       	st	Z, r24
    1f40:	64 c0       	rjmp	.+200    	; 0x200a <main+0x180>
	else if (__tmp > 65535)
    1f42:	fe 01       	movw	r30, r28
    1f44:	e5 5a       	subi	r30, 0xA5	; 165
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	60 81       	ld	r22, Z
    1f4a:	71 81       	ldd	r23, Z+1	; 0x01
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	93 81       	ldd	r25, Z+3	; 0x03
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	3f ef       	ldi	r19, 0xFF	; 255
    1f54:	4f e7       	ldi	r20, 0x7F	; 127
    1f56:	57 e4       	ldi	r21, 0x47	; 71
    1f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5c:	18 16       	cp	r1, r24
    1f5e:	0c f0       	brlt	.+2      	; 0x1f62 <main+0xd8>
    1f60:	43 c0       	rjmp	.+134    	; 0x1fe8 <main+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f62:	fe 01       	movw	r30, r28
    1f64:	e1 5a       	subi	r30, 0xA1	; 161
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	60 81       	ld	r22, Z
    1f6a:	71 81       	ldd	r23, Z+1	; 0x01
    1f6c:	82 81       	ldd	r24, Z+2	; 0x02
    1f6e:	93 81       	ldd	r25, Z+3	; 0x03
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e2       	ldi	r20, 0x20	; 32
    1f76:	51 e4       	ldi	r21, 0x41	; 65
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	8e 01       	movw	r16, r28
    1f82:	07 5a       	subi	r16, 0xA7	; 167
    1f84:	1f 4f       	sbci	r17, 0xFF	; 255
    1f86:	bc 01       	movw	r22, r24
    1f88:	cd 01       	movw	r24, r26
    1f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	f8 01       	movw	r30, r16
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	80 83       	st	Z, r24
    1f98:	1f c0       	rjmp	.+62     	; 0x1fd8 <main+0x14e>
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	e9 5a       	subi	r30, 0xA9	; 169
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	89 e1       	ldi	r24, 0x19	; 25
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	91 83       	std	Z+1, r25	; 0x01
    1fa6:	80 83       	st	Z, r24
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e9 5a       	subi	r30, 0xA9	; 169
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	80 81       	ld	r24, Z
    1fb0:	91 81       	ldd	r25, Z+1	; 0x01
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <main+0x128>
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e9 5a       	subi	r30, 0xA9	; 169
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	91 83       	std	Z+1, r25	; 0x01
    1fbe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc0:	de 01       	movw	r26, r28
    1fc2:	a7 5a       	subi	r26, 0xA7	; 167
    1fc4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e7 5a       	subi	r30, 0xA7	; 167
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	11 96       	adiw	r26, 0x01	; 1
    1fd4:	9c 93       	st	X, r25
    1fd6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e7 5a       	subi	r30, 0xA7	; 167
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	d1 f6       	brne	.-76     	; 0x1f9a <main+0x110>
    1fe6:	27 c0       	rjmp	.+78     	; 0x2036 <main+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe8:	8e 01       	movw	r16, r28
    1fea:	07 5a       	subi	r16, 0xA7	; 167
    1fec:	1f 4f       	sbci	r17, 0xFF	; 255
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e5 5a       	subi	r30, 0xA5	; 165
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	60 81       	ld	r22, Z
    1ff6:	71 81       	ldd	r23, Z+1	; 0x01
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	f8 01       	movw	r30, r16
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	80 83       	st	Z, r24
    200a:	de 01       	movw	r26, r28
    200c:	ab 5a       	subi	r26, 0xAB	; 171
    200e:	bf 4f       	sbci	r27, 0xFF	; 255
    2010:	fe 01       	movw	r30, r28
    2012:	e7 5a       	subi	r30, 0xA7	; 167
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	80 81       	ld	r24, Z
    2018:	91 81       	ldd	r25, Z+1	; 0x01
    201a:	8d 93       	st	X+, r24
    201c:	9c 93       	st	X, r25
    201e:	fe 01       	movw	r30, r28
    2020:	eb 5a       	subi	r30, 0xAB	; 171
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 81       	ld	r24, Z
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <main+0x19e>
    202c:	fe 01       	movw	r30, r28
    202e:	eb 5a       	subi	r30, 0xAB	; 171
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	91 83       	std	Z+1, r25	; 0x01
    2034:	80 83       	st	Z, r24
	_delay_ms(10);
	get_pass("Renter pass:",match_pass);
    2036:	85 ec       	ldi	r24, 0xC5	; 197
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9e 01       	movw	r18, r28
    203c:	24 59       	subi	r18, 0x94	; 148
    203e:	3f 4f       	sbci	r19, 0xFF	; 255
    2040:	b9 01       	movw	r22, r18
    2042:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_pass>
	F_compare(new_pass,match_pass,"Renter Pass:",READY1);
    2046:	ce 01       	movw	r24, r28
    2048:	8b 59       	subi	r24, 0x9B	; 155
    204a:	9f 4f       	sbci	r25, 0xFF	; 255
    204c:	9e 01       	movw	r18, r28
    204e:	24 59       	subi	r18, 0x94	; 148
    2050:	3f 4f       	sbci	r19, 0xFF	; 255
    2052:	42 ed       	ldi	r20, 0xD2	; 210
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	b9 01       	movw	r22, r18
    2058:	2a e0       	ldi	r18, 0x0A	; 10
    205a:	0e 94 3c 07 	call	0xe78	; 0xe78 <F_compare>
    	/*
    	 * once the program started and get new password from new user you will
    	 * see the following messages
    	 */

		LCD_displayStringRowColumn(0,0,"= open the door");
    205e:	2f ed       	ldi	r18, 0xDF	; 223
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	60 e0       	ldi	r22, 0x00	; 0
    2066:	a9 01       	movw	r20, r18
    2068:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"+ change pass");
    206c:	2f ee       	ldi	r18, 0xEF	; 239
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	a9 01       	movw	r20, r18
    2076:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_displayStringRowColumn>
    207a:	fe 01       	movw	r30, r28
    207c:	ef 5a       	subi	r30, 0xAF	; 175
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	aa e7       	ldi	r26, 0x7A	; 122
    2086:	b3 e4       	ldi	r27, 0x43	; 67
    2088:	80 83       	st	Z, r24
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	a2 83       	std	Z+2, r26	; 0x02
    208e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2090:	8e 01       	movw	r16, r28
    2092:	03 5b       	subi	r16, 0xB3	; 179
    2094:	1f 4f       	sbci	r17, 0xFF	; 255
    2096:	fe 01       	movw	r30, r28
    2098:	ef 5a       	subi	r30, 0xAF	; 175
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	60 81       	ld	r22, Z
    209e:	71 81       	ldd	r23, Z+1	; 0x01
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	93 81       	ldd	r25, Z+3	; 0x03
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	4a e7       	ldi	r20, 0x7A	; 122
    20aa:	53 e4       	ldi	r21, 0x43	; 67
    20ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	f8 01       	movw	r30, r16
    20b6:	80 83       	st	Z, r24
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	a2 83       	std	Z+2, r26	; 0x02
    20bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20be:	fe 01       	movw	r30, r28
    20c0:	e3 5b       	subi	r30, 0xB3	; 179
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	60 81       	ld	r22, Z
    20c6:	71 81       	ldd	r23, Z+1	; 0x01
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	93 81       	ldd	r25, Z+3	; 0x03
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e8       	ldi	r20, 0x80	; 128
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d8:	88 23       	and	r24, r24
    20da:	44 f4       	brge	.+16     	; 0x20ec <main+0x262>
		__ticks = 1;
    20dc:	fe 01       	movw	r30, r28
    20de:	e5 5b       	subi	r30, 0xB5	; 181
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	91 83       	std	Z+1, r25	; 0x01
    20e8:	80 83       	st	Z, r24
    20ea:	64 c0       	rjmp	.+200    	; 0x21b4 <main+0x32a>
	else if (__tmp > 65535)
    20ec:	fe 01       	movw	r30, r28
    20ee:	e3 5b       	subi	r30, 0xB3	; 179
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	3f ef       	ldi	r19, 0xFF	; 255
    20fe:	4f e7       	ldi	r20, 0x7F	; 127
    2100:	57 e4       	ldi	r21, 0x47	; 71
    2102:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2106:	18 16       	cp	r1, r24
    2108:	0c f0       	brlt	.+2      	; 0x210c <main+0x282>
    210a:	43 c0       	rjmp	.+134    	; 0x2192 <main+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210c:	fe 01       	movw	r30, r28
    210e:	ef 5a       	subi	r30, 0xAF	; 175
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	60 81       	ld	r22, Z
    2114:	71 81       	ldd	r23, Z+1	; 0x01
    2116:	82 81       	ldd	r24, Z+2	; 0x02
    2118:	93 81       	ldd	r25, Z+3	; 0x03
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e2       	ldi	r20, 0x20	; 32
    2120:	51 e4       	ldi	r21, 0x41	; 65
    2122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	8e 01       	movw	r16, r28
    212c:	05 5b       	subi	r16, 0xB5	; 181
    212e:	1f 4f       	sbci	r17, 0xFF	; 255
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	f8 01       	movw	r30, r16
    213e:	91 83       	std	Z+1, r25	; 0x01
    2140:	80 83       	st	Z, r24
    2142:	1f c0       	rjmp	.+62     	; 0x2182 <main+0x2f8>
    2144:	fe 01       	movw	r30, r28
    2146:	e7 5b       	subi	r30, 0xB7	; 183
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	89 e1       	ldi	r24, 0x19	; 25
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	80 83       	st	Z, r24
    2152:	fe 01       	movw	r30, r28
    2154:	e7 5b       	subi	r30, 0xB7	; 183
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	91 81       	ldd	r25, Z+1	; 0x01
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <main+0x2d2>
    2160:	fe 01       	movw	r30, r28
    2162:	e7 5b       	subi	r30, 0xB7	; 183
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216a:	de 01       	movw	r26, r28
    216c:	a5 5b       	subi	r26, 0xB5	; 181
    216e:	bf 4f       	sbci	r27, 0xFF	; 255
    2170:	fe 01       	movw	r30, r28
    2172:	e5 5b       	subi	r30, 0xB5	; 181
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	80 81       	ld	r24, Z
    2178:	91 81       	ldd	r25, Z+1	; 0x01
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	11 96       	adiw	r26, 0x01	; 1
    217e:	9c 93       	st	X, r25
    2180:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2182:	fe 01       	movw	r30, r28
    2184:	e5 5b       	subi	r30, 0xB5	; 181
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	80 81       	ld	r24, Z
    218a:	91 81       	ldd	r25, Z+1	; 0x01
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	d1 f6       	brne	.-76     	; 0x2144 <main+0x2ba>
    2190:	27 c0       	rjmp	.+78     	; 0x21e0 <main+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2192:	8e 01       	movw	r16, r28
    2194:	05 5b       	subi	r16, 0xB5	; 181
    2196:	1f 4f       	sbci	r17, 0xFF	; 255
    2198:	fe 01       	movw	r30, r28
    219a:	e3 5b       	subi	r30, 0xB3	; 179
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	60 81       	ld	r22, Z
    21a0:	71 81       	ldd	r23, Z+1	; 0x01
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	93 81       	ldd	r25, Z+3	; 0x03
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	f8 01       	movw	r30, r16
    21b0:	91 83       	std	Z+1, r25	; 0x01
    21b2:	80 83       	st	Z, r24
    21b4:	de 01       	movw	r26, r28
    21b6:	a9 5b       	subi	r26, 0xB9	; 185
    21b8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ba:	fe 01       	movw	r30, r28
    21bc:	e5 5b       	subi	r30, 0xB5	; 181
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 81       	ld	r24, Z
    21c2:	91 81       	ldd	r25, Z+1	; 0x01
    21c4:	8d 93       	st	X+, r24
    21c6:	9c 93       	st	X, r25
    21c8:	fe 01       	movw	r30, r28
    21ca:	e9 5b       	subi	r30, 0xB9	; 185
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <main+0x348>
    21d6:	fe 01       	movw	r30, r28
    21d8:	e9 5b       	subi	r30, 0xB9	; 185
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	91 83       	std	Z+1, r25	; 0x01
    21de:	80 83       	st	Z, r24
		_delay_ms(250);

		//Get user option to do specific actions on the second MCU

		key = KeyPad_getPressedKey(); /* get the pressed key number */
    21e0:	0e 94 61 09 	call	0x12c2	; 0x12c2 <KeyPad_getPressedKey>
    21e4:	fe 01       	movw	r30, r28
    21e6:	ed 59       	subi	r30, 0x9D	; 157
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 83       	st	Z, r24
    21ec:	fe 01       	movw	r30, r28
    21ee:	ed 5b       	subi	r30, 0xBD	; 189
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	aa e7       	ldi	r26, 0x7A	; 122
    21f8:	b3 e4       	ldi	r27, 0x43	; 67
    21fa:	80 83       	st	Z, r24
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	a2 83       	std	Z+2, r26	; 0x02
    2200:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2202:	8e 01       	movw	r16, r28
    2204:	01 5c       	subi	r16, 0xC1	; 193
    2206:	1f 4f       	sbci	r17, 0xFF	; 255
    2208:	fe 01       	movw	r30, r28
    220a:	ed 5b       	subi	r30, 0xBD	; 189
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	60 81       	ld	r22, Z
    2210:	71 81       	ldd	r23, Z+1	; 0x01
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	93 81       	ldd	r25, Z+3	; 0x03
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a e7       	ldi	r20, 0x7A	; 122
    221c:	53 e4       	ldi	r21, 0x43	; 67
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	f8 01       	movw	r30, r16
    2228:	80 83       	st	Z, r24
    222a:	91 83       	std	Z+1, r25	; 0x01
    222c:	a2 83       	std	Z+2, r26	; 0x02
    222e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2230:	fe 01       	movw	r30, r28
    2232:	ff 96       	adiw	r30, 0x3f	; 63
    2234:	60 81       	ld	r22, Z
    2236:	71 81       	ldd	r23, Z+1	; 0x01
    2238:	82 81       	ldd	r24, Z+2	; 0x02
    223a:	93 81       	ldd	r25, Z+3	; 0x03
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e8       	ldi	r20, 0x80	; 128
    2242:	5f e3       	ldi	r21, 0x3F	; 63
    2244:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2248:	88 23       	and	r24, r24
    224a:	2c f4       	brge	.+10     	; 0x2256 <main+0x3cc>
		__ticks = 1;
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	9e af       	std	Y+62, r25	; 0x3e
    2252:	8d af       	std	Y+61, r24	; 0x3d
    2254:	46 c0       	rjmp	.+140    	; 0x22e2 <main+0x458>
	else if (__tmp > 65535)
    2256:	fe 01       	movw	r30, r28
    2258:	ff 96       	adiw	r30, 0x3f	; 63
    225a:	60 81       	ld	r22, Z
    225c:	71 81       	ldd	r23, Z+1	; 0x01
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	3f ef       	ldi	r19, 0xFF	; 255
    2266:	4f e7       	ldi	r20, 0x7F	; 127
    2268:	57 e4       	ldi	r21, 0x47	; 71
    226a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    226e:	18 16       	cp	r1, r24
    2270:	64 f5       	brge	.+88     	; 0x22ca <main+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2272:	fe 01       	movw	r30, r28
    2274:	ed 5b       	subi	r30, 0xBD	; 189
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e2       	ldi	r20, 0x20	; 32
    2286:	51 e4       	ldi	r21, 0x41	; 65
    2288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9e af       	std	Y+62, r25	; 0x3e
    229e:	8d af       	std	Y+61, r24	; 0x3d
    22a0:	0f c0       	rjmp	.+30     	; 0x22c0 <main+0x436>
    22a2:	89 e1       	ldi	r24, 0x19	; 25
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	9c af       	std	Y+60, r25	; 0x3c
    22a8:	8b af       	std	Y+59, r24	; 0x3b
    22aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    22ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <main+0x424>
    22b2:	9c af       	std	Y+60, r25	; 0x3c
    22b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    22b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	9e af       	std	Y+62, r25	; 0x3e
    22be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    22c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	69 f7       	brne	.-38     	; 0x22a2 <main+0x418>
    22c8:	16 c0       	rjmp	.+44     	; 0x22f6 <main+0x46c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ca:	fe 01       	movw	r30, r28
    22cc:	ff 96       	adiw	r30, 0x3f	; 63
    22ce:	60 81       	ld	r22, Z
    22d0:	71 81       	ldd	r23, Z+1	; 0x01
    22d2:	82 81       	ldd	r24, Z+2	; 0x02
    22d4:	93 81       	ldd	r25, Z+3	; 0x03
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9e af       	std	Y+62, r25	; 0x3e
    22e0:	8d af       	std	Y+61, r24	; 0x3d
    22e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    22e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    22e6:	9a af       	std	Y+58, r25	; 0x3a
    22e8:	89 af       	std	Y+57, r24	; 0x39
    22ea:	89 ad       	ldd	r24, Y+57	; 0x39
    22ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <main+0x464>
    22f2:	9a af       	std	Y+58, r25	; 0x3a
    22f4:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(250); /* Press time  */

		if (key =='+'){
    22f6:	fe 01       	movw	r30, r28
    22f8:	ed 59       	subi	r30, 0x9D	; 157
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 81       	ld	r24, Z
    22fe:	8b 32       	cpi	r24, 0x2B	; 43
    2300:	09 f0       	breq	.+2      	; 0x2304 <main+0x47a>
    2302:	41 c1       	rjmp	.+642    	; 0x2586 <main+0x6fc>
			get_pass("Enter old Pass:", old_pass);
    2304:	8d ef       	ldi	r24, 0xFD	; 253
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9e 01       	movw	r18, r28
    230a:	2d 58       	subi	r18, 0x8D	; 141
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
    230e:	b9 01       	movw	r22, r18
    2310:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_pass>
			UART_sendByte(READY2);
    2314:	84 e1       	ldi	r24, 0x14	; 20
    2316:	0e 94 39 14 	call	0x2872	; 0x2872 <UART_sendByte>
			for(i=0;i<5;i++){
    231a:	fe 01       	movw	r30, r28
    231c:	ec 59       	subi	r30, 0x9C	; 156
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	10 82       	st	Z, r1
    2322:	8f c0       	rjmp	.+286    	; 0x2442 <main+0x5b8>
				while(UART_recieveByte()!=READY2){};
    2324:	0e 94 50 14 	call	0x28a0	; 0x28a0 <UART_recieveByte>
    2328:	84 31       	cpi	r24, 0x14	; 20
    232a:	e1 f7       	brne	.-8      	; 0x2324 <main+0x49a>
				match_pass2[i]=UART_recieveByte();
    232c:	fe 01       	movw	r30, r28
    232e:	ec 59       	subi	r30, 0x9C	; 156
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	80 81       	ld	r24, Z
    2334:	08 2f       	mov	r16, r24
    2336:	10 e0       	ldi	r17, 0x00	; 0
    2338:	0e 94 50 14 	call	0x28a0	; 0x28a0 <UART_recieveByte>
    233c:	28 2f       	mov	r18, r24
    233e:	ce 01       	movw	r24, r28
    2340:	86 58       	subi	r24, 0x86	; 134
    2342:	9f 4f       	sbci	r25, 0xFF	; 255
    2344:	fc 01       	movw	r30, r24
    2346:	e0 0f       	add	r30, r16
    2348:	f1 1f       	adc	r31, r17
    234a:	20 83       	st	Z, r18
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a8 ec       	ldi	r26, 0xC8	; 200
    2352:	b2 e4       	ldi	r27, 0x42	; 66
    2354:	8d ab       	std	Y+53, r24	; 0x35
    2356:	9e ab       	std	Y+54, r25	; 0x36
    2358:	af ab       	std	Y+55, r26	; 0x37
    235a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235c:	6d a9       	ldd	r22, Y+53	; 0x35
    235e:	7e a9       	ldd	r23, Y+54	; 0x36
    2360:	8f a9       	ldd	r24, Y+55	; 0x37
    2362:	98 ad       	ldd	r25, Y+56	; 0x38
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	4a e7       	ldi	r20, 0x7A	; 122
    236a:	53 e4       	ldi	r21, 0x43	; 67
    236c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	89 ab       	std	Y+49, r24	; 0x31
    2376:	9a ab       	std	Y+50, r25	; 0x32
    2378:	ab ab       	std	Y+51, r26	; 0x33
    237a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    237c:	69 a9       	ldd	r22, Y+49	; 0x31
    237e:	7a a9       	ldd	r23, Y+50	; 0x32
    2380:	8b a9       	ldd	r24, Y+51	; 0x33
    2382:	9c a9       	ldd	r25, Y+52	; 0x34
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e8       	ldi	r20, 0x80	; 128
    238a:	5f e3       	ldi	r21, 0x3F	; 63
    238c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2390:	88 23       	and	r24, r24
    2392:	2c f4       	brge	.+10     	; 0x239e <main+0x514>
		__ticks = 1;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	98 ab       	std	Y+48, r25	; 0x30
    239a:	8f a7       	std	Y+47, r24	; 0x2f
    239c:	3f c0       	rjmp	.+126    	; 0x241c <main+0x592>
	else if (__tmp > 65535)
    239e:	69 a9       	ldd	r22, Y+49	; 0x31
    23a0:	7a a9       	ldd	r23, Y+50	; 0x32
    23a2:	8b a9       	ldd	r24, Y+51	; 0x33
    23a4:	9c a9       	ldd	r25, Y+52	; 0x34
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	3f ef       	ldi	r19, 0xFF	; 255
    23aa:	4f e7       	ldi	r20, 0x7F	; 127
    23ac:	57 e4       	ldi	r21, 0x47	; 71
    23ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	4c f5       	brge	.+82     	; 0x2408 <main+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b6:	6d a9       	ldd	r22, Y+53	; 0x35
    23b8:	7e a9       	ldd	r23, Y+54	; 0x36
    23ba:	8f a9       	ldd	r24, Y+55	; 0x37
    23bc:	98 ad       	ldd	r25, Y+56	; 0x38
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	98 ab       	std	Y+48, r25	; 0x30
    23dc:	8f a7       	std	Y+47, r24	; 0x2f
    23de:	0f c0       	rjmp	.+30     	; 0x23fe <main+0x574>
    23e0:	89 e1       	ldi	r24, 0x19	; 25
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	9e a7       	std	Y+46, r25	; 0x2e
    23e6:	8d a7       	std	Y+45, r24	; 0x2d
    23e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    23ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <main+0x562>
    23f0:	9e a7       	std	Y+46, r25	; 0x2e
    23f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f6:	98 a9       	ldd	r25, Y+48	; 0x30
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	98 ab       	std	Y+48, r25	; 0x30
    23fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2400:	98 a9       	ldd	r25, Y+48	; 0x30
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	69 f7       	brne	.-38     	; 0x23e0 <main+0x556>
    2406:	14 c0       	rjmp	.+40     	; 0x2430 <main+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2408:	69 a9       	ldd	r22, Y+49	; 0x31
    240a:	7a a9       	ldd	r23, Y+50	; 0x32
    240c:	8b a9       	ldd	r24, Y+51	; 0x33
    240e:	9c a9       	ldd	r25, Y+52	; 0x34
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	98 ab       	std	Y+48, r25	; 0x30
    241a:	8f a7       	std	Y+47, r24	; 0x2f
    241c:	8f a5       	ldd	r24, Y+47	; 0x2f
    241e:	98 a9       	ldd	r25, Y+48	; 0x30
    2420:	9c a7       	std	Y+44, r25	; 0x2c
    2422:	8b a7       	std	Y+43, r24	; 0x2b
    2424:	8b a5       	ldd	r24, Y+43	; 0x2b
    2426:	9c a5       	ldd	r25, Y+44	; 0x2c
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <main+0x59e>
    242c:	9c a7       	std	Y+44, r25	; 0x2c
    242e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(250); /* Press time  */

		if (key =='+'){
			get_pass("Enter old Pass:", old_pass);
			UART_sendByte(READY2);
			for(i=0;i<5;i++){
    2430:	de 01       	movw	r26, r28
    2432:	ac 59       	subi	r26, 0x9C	; 156
    2434:	bf 4f       	sbci	r27, 0xFF	; 255
    2436:	fe 01       	movw	r30, r28
    2438:	ec 59       	subi	r30, 0x9C	; 156
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 81       	ld	r24, Z
    243e:	8f 5f       	subi	r24, 0xFF	; 255
    2440:	8c 93       	st	X, r24
    2442:	fe 01       	movw	r30, r28
    2444:	ec 59       	subi	r30, 0x9C	; 156
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	80 81       	ld	r24, Z
    244a:	85 30       	cpi	r24, 0x05	; 5
    244c:	08 f4       	brcc	.+2      	; 0x2450 <main+0x5c6>
    244e:	6a cf       	rjmp	.-300    	; 0x2324 <main+0x49a>
				while(UART_recieveByte()!=READY2){};
				match_pass2[i]=UART_recieveByte();
				_delay_ms(100);
			}
			//Check_Stranger(match_pass2,old_pass,"Renter old Pss:");
			F_compare(match_pass2,old_pass,"Renter old Pass:",READY3);
    2450:	ce 01       	movw	r24, r28
    2452:	86 58       	subi	r24, 0x86	; 134
    2454:	9f 4f       	sbci	r25, 0xFF	; 255
    2456:	9e 01       	movw	r18, r28
    2458:	2d 58       	subi	r18, 0x8D	; 141
    245a:	3f 4f       	sbci	r19, 0xFF	; 255
    245c:	4d e0       	ldi	r20, 0x0D	; 13
    245e:	51 e0       	ldi	r21, 0x01	; 1
    2460:	b9 01       	movw	r22, r18
    2462:	2e e1       	ldi	r18, 0x1E	; 30
    2464:	0e 94 3c 07 	call	0xe78	; 0xe78 <F_compare>
			get_pass("Enter new Pass:", new_pass);
    2468:	8e e1       	ldi	r24, 0x1E	; 30
    246a:	91 e0       	ldi	r25, 0x01	; 1
    246c:	9e 01       	movw	r18, r28
    246e:	2b 59       	subi	r18, 0x9B	; 155
    2470:	3f 4f       	sbci	r19, 0xFF	; 255
    2472:	b9 01       	movw	r22, r18
    2474:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_pass>
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	a0 e2       	ldi	r26, 0x20	; 32
    247e:	b1 e4       	ldi	r27, 0x41	; 65
    2480:	8f a3       	std	Y+39, r24	; 0x27
    2482:	98 a7       	std	Y+40, r25	; 0x28
    2484:	a9 a7       	std	Y+41, r26	; 0x29
    2486:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	6f a1       	ldd	r22, Y+39	; 0x27
    248a:	78 a5       	ldd	r23, Y+40	; 0x28
    248c:	89 a5       	ldd	r24, Y+41	; 0x29
    248e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a e7       	ldi	r20, 0x7A	; 122
    2496:	53 e4       	ldi	r21, 0x43	; 67
    2498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	8b a3       	std	Y+35, r24	; 0x23
    24a2:	9c a3       	std	Y+36, r25	; 0x24
    24a4:	ad a3       	std	Y+37, r26	; 0x25
    24a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24a8:	6b a1       	ldd	r22, Y+35	; 0x23
    24aa:	7c a1       	ldd	r23, Y+36	; 0x24
    24ac:	8d a1       	ldd	r24, Y+37	; 0x25
    24ae:	9e a1       	ldd	r25, Y+38	; 0x26
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	2c f4       	brge	.+10     	; 0x24ca <main+0x640>
		__ticks = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9a a3       	std	Y+34, r25	; 0x22
    24c6:	89 a3       	std	Y+33, r24	; 0x21
    24c8:	3f c0       	rjmp	.+126    	; 0x2548 <main+0x6be>
	else if (__tmp > 65535)
    24ca:	6b a1       	ldd	r22, Y+35	; 0x23
    24cc:	7c a1       	ldd	r23, Y+36	; 0x24
    24ce:	8d a1       	ldd	r24, Y+37	; 0x25
    24d0:	9e a1       	ldd	r25, Y+38	; 0x26
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	4c f5       	brge	.+82     	; 0x2534 <main+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e2:	6f a1       	ldd	r22, Y+39	; 0x27
    24e4:	78 a5       	ldd	r23, Y+40	; 0x28
    24e6:	89 a5       	ldd	r24, Y+41	; 0x29
    24e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9a a3       	std	Y+34, r25	; 0x22
    2508:	89 a3       	std	Y+33, r24	; 0x21
    250a:	0f c0       	rjmp	.+30     	; 0x252a <main+0x6a0>
    250c:	89 e1       	ldi	r24, 0x19	; 25
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	98 a3       	std	Y+32, r25	; 0x20
    2512:	8f 8f       	std	Y+31, r24	; 0x1f
    2514:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2516:	98 a1       	ldd	r25, Y+32	; 0x20
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <main+0x68e>
    251c:	98 a3       	std	Y+32, r25	; 0x20
    251e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	89 a1       	ldd	r24, Y+33	; 0x21
    2522:	9a a1       	ldd	r25, Y+34	; 0x22
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	9a a3       	std	Y+34, r25	; 0x22
    2528:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252a:	89 a1       	ldd	r24, Y+33	; 0x21
    252c:	9a a1       	ldd	r25, Y+34	; 0x22
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	69 f7       	brne	.-38     	; 0x250c <main+0x682>
    2532:	14 c0       	rjmp	.+40     	; 0x255c <main+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	6b a1       	ldd	r22, Y+35	; 0x23
    2536:	7c a1       	ldd	r23, Y+36	; 0x24
    2538:	8d a1       	ldd	r24, Y+37	; 0x25
    253a:	9e a1       	ldd	r25, Y+38	; 0x26
    253c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	9a a3       	std	Y+34, r25	; 0x22
    2546:	89 a3       	std	Y+33, r24	; 0x21
    2548:	89 a1       	ldd	r24, Y+33	; 0x21
    254a:	9a a1       	ldd	r25, Y+34	; 0x22
    254c:	9e 8f       	std	Y+30, r25	; 0x1e
    254e:	8d 8f       	std	Y+29, r24	; 0x1d
    2550:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2552:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <main+0x6ca>
    2558:	9e 8f       	std	Y+30, r25	; 0x1e
    255a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			get_pass("Renter Pass:",match_pass);
    255c:	82 ed       	ldi	r24, 0xD2	; 210
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	9e 01       	movw	r18, r28
    2562:	24 59       	subi	r18, 0x94	; 148
    2564:	3f 4f       	sbci	r19, 0xFF	; 255
    2566:	b9 01       	movw	r22, r18
    2568:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_pass>
			F_compare(new_pass,match_pass,"Renter pass:",READY1);
    256c:	ce 01       	movw	r24, r28
    256e:	8b 59       	subi	r24, 0x9B	; 155
    2570:	9f 4f       	sbci	r25, 0xFF	; 255
    2572:	9e 01       	movw	r18, r28
    2574:	24 59       	subi	r18, 0x94	; 148
    2576:	3f 4f       	sbci	r19, 0xFF	; 255
    2578:	45 ec       	ldi	r20, 0xC5	; 197
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	b9 01       	movw	r22, r18
    257e:	2a e0       	ldi	r18, 0x0A	; 10
    2580:	0e 94 3c 07 	call	0xe78	; 0xe78 <F_compare>
    2584:	4f c1       	rjmp	.+670    	; 0x2824 <main+0x99a>
		}

		else if(key=='='){
    2586:	fe 01       	movw	r30, r28
    2588:	ed 59       	subi	r30, 0x9D	; 157
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	8d 33       	cpi	r24, 0x3D	; 61
    2590:	09 f0       	breq	.+2      	; 0x2594 <main+0x70a>
    2592:	48 c1       	rjmp	.+656    	; 0x2824 <main+0x99a>
			get_pass("Enter your Pass:", new_pass);
    2594:	8e e2       	ldi	r24, 0x2E	; 46
    2596:	91 e0       	ldi	r25, 0x01	; 1
    2598:	9e 01       	movw	r18, r28
    259a:	2b 59       	subi	r18, 0x9B	; 155
    259c:	3f 4f       	sbci	r19, 0xFF	; 255
    259e:	b9 01       	movw	r22, r18
    25a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <get_pass>
			UART_sendByte(READY6);
    25a4:	8c e3       	ldi	r24, 0x3C	; 60
    25a6:	0e 94 39 14 	call	0x2872	; 0x2872 <UART_sendByte>
			for(i=0;i<5;i++){
    25aa:	fe 01       	movw	r30, r28
    25ac:	ec 59       	subi	r30, 0x9C	; 156
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	10 82       	st	Z, r1
    25b2:	8f c0       	rjmp	.+286    	; 0x26d2 <main+0x848>
				while(UART_recieveByte()!=READY6){};
    25b4:	0e 94 50 14 	call	0x28a0	; 0x28a0 <UART_recieveByte>
    25b8:	8c 33       	cpi	r24, 0x3C	; 60
    25ba:	e1 f7       	brne	.-8      	; 0x25b4 <main+0x72a>
				match_pass2[i]=UART_recieveByte();
    25bc:	fe 01       	movw	r30, r28
    25be:	ec 59       	subi	r30, 0x9C	; 156
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
    25c4:	08 2f       	mov	r16, r24
    25c6:	10 e0       	ldi	r17, 0x00	; 0
    25c8:	0e 94 50 14 	call	0x28a0	; 0x28a0 <UART_recieveByte>
    25cc:	28 2f       	mov	r18, r24
    25ce:	ce 01       	movw	r24, r28
    25d0:	86 58       	subi	r24, 0x86	; 134
    25d2:	9f 4f       	sbci	r25, 0xFF	; 255
    25d4:	fc 01       	movw	r30, r24
    25d6:	e0 0f       	add	r30, r16
    25d8:	f1 1f       	adc	r31, r17
    25da:	20 83       	st	Z, r18
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	a8 ec       	ldi	r26, 0xC8	; 200
    25e2:	b2 e4       	ldi	r27, 0x42	; 66
    25e4:	89 8f       	std	Y+25, r24	; 0x19
    25e6:	9a 8f       	std	Y+26, r25	; 0x1a
    25e8:	ab 8f       	std	Y+27, r26	; 0x1b
    25ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ec:	69 8d       	ldd	r22, Y+25	; 0x19
    25ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	4a e7       	ldi	r20, 0x7A	; 122
    25fa:	53 e4       	ldi	r21, 0x43	; 67
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	8d 8b       	std	Y+21, r24	; 0x15
    2606:	9e 8b       	std	Y+22, r25	; 0x16
    2608:	af 8b       	std	Y+23, r26	; 0x17
    260a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    260c:	6d 89       	ldd	r22, Y+21	; 0x15
    260e:	7e 89       	ldd	r23, Y+22	; 0x16
    2610:	8f 89       	ldd	r24, Y+23	; 0x17
    2612:	98 8d       	ldd	r25, Y+24	; 0x18
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e8       	ldi	r20, 0x80	; 128
    261a:	5f e3       	ldi	r21, 0x3F	; 63
    261c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2620:	88 23       	and	r24, r24
    2622:	2c f4       	brge	.+10     	; 0x262e <main+0x7a4>
		__ticks = 1;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9c 8b       	std	Y+20, r25	; 0x14
    262a:	8b 8b       	std	Y+19, r24	; 0x13
    262c:	3f c0       	rjmp	.+126    	; 0x26ac <main+0x822>
	else if (__tmp > 65535)
    262e:	6d 89       	ldd	r22, Y+21	; 0x15
    2630:	7e 89       	ldd	r23, Y+22	; 0x16
    2632:	8f 89       	ldd	r24, Y+23	; 0x17
    2634:	98 8d       	ldd	r25, Y+24	; 0x18
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	3f ef       	ldi	r19, 0xFF	; 255
    263a:	4f e7       	ldi	r20, 0x7F	; 127
    263c:	57 e4       	ldi	r21, 0x47	; 71
    263e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2642:	18 16       	cp	r1, r24
    2644:	4c f5       	brge	.+82     	; 0x2698 <main+0x80e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2646:	69 8d       	ldd	r22, Y+25	; 0x19
    2648:	7a 8d       	ldd	r23, Y+26	; 0x1a
    264a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    264c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e2       	ldi	r20, 0x20	; 32
    2654:	51 e4       	ldi	r21, 0x41	; 65
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9c 8b       	std	Y+20, r25	; 0x14
    266c:	8b 8b       	std	Y+19, r24	; 0x13
    266e:	0f c0       	rjmp	.+30     	; 0x268e <main+0x804>
    2670:	89 e1       	ldi	r24, 0x19	; 25
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	9a 8b       	std	Y+18, r25	; 0x12
    2676:	89 8b       	std	Y+17, r24	; 0x11
    2678:	89 89       	ldd	r24, Y+17	; 0x11
    267a:	9a 89       	ldd	r25, Y+18	; 0x12
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <main+0x7f2>
    2680:	9a 8b       	std	Y+18, r25	; 0x12
    2682:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2684:	8b 89       	ldd	r24, Y+19	; 0x13
    2686:	9c 89       	ldd	r25, Y+20	; 0x14
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	9c 8b       	std	Y+20, r25	; 0x14
    268c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268e:	8b 89       	ldd	r24, Y+19	; 0x13
    2690:	9c 89       	ldd	r25, Y+20	; 0x14
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	69 f7       	brne	.-38     	; 0x2670 <main+0x7e6>
    2696:	14 c0       	rjmp	.+40     	; 0x26c0 <main+0x836>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2698:	6d 89       	ldd	r22, Y+21	; 0x15
    269a:	7e 89       	ldd	r23, Y+22	; 0x16
    269c:	8f 89       	ldd	r24, Y+23	; 0x17
    269e:	98 8d       	ldd	r25, Y+24	; 0x18
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	9c 8b       	std	Y+20, r25	; 0x14
    26aa:	8b 8b       	std	Y+19, r24	; 0x13
    26ac:	8b 89       	ldd	r24, Y+19	; 0x13
    26ae:	9c 89       	ldd	r25, Y+20	; 0x14
    26b0:	98 8b       	std	Y+16, r25	; 0x10
    26b2:	8f 87       	std	Y+15, r24	; 0x0f
    26b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b6:	98 89       	ldd	r25, Y+16	; 0x10
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <main+0x82e>
    26bc:	98 8b       	std	Y+16, r25	; 0x10
    26be:	8f 87       	std	Y+15, r24	; 0x0f
		}

		else if(key=='='){
			get_pass("Enter your Pass:", new_pass);
			UART_sendByte(READY6);
			for(i=0;i<5;i++){
    26c0:	de 01       	movw	r26, r28
    26c2:	ac 59       	subi	r26, 0x9C	; 156
    26c4:	bf 4f       	sbci	r27, 0xFF	; 255
    26c6:	fe 01       	movw	r30, r28
    26c8:	ec 59       	subi	r30, 0x9C	; 156
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 81       	ld	r24, Z
    26ce:	8f 5f       	subi	r24, 0xFF	; 255
    26d0:	8c 93       	st	X, r24
    26d2:	fe 01       	movw	r30, r28
    26d4:	ec 59       	subi	r30, 0x9C	; 156
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 81       	ld	r24, Z
    26da:	85 30       	cpi	r24, 0x05	; 5
    26dc:	08 f4       	brcc	.+2      	; 0x26e0 <main+0x856>
    26de:	6a cf       	rjmp	.-300    	; 0x25b4 <main+0x72a>
				while(UART_recieveByte()!=READY6){};
				match_pass2[i]=UART_recieveByte();
				_delay_ms(100);
			}

			F_compare(match_pass2,new_pass,"Renter your Pss:",READY7);
    26e0:	ce 01       	movw	r24, r28
    26e2:	86 58       	subi	r24, 0x86	; 134
    26e4:	9f 4f       	sbci	r25, 0xFF	; 255
    26e6:	9e 01       	movw	r18, r28
    26e8:	2b 59       	subi	r18, 0x9B	; 155
    26ea:	3f 4f       	sbci	r19, 0xFF	; 255
    26ec:	4f e3       	ldi	r20, 0x3F	; 63
    26ee:	51 e0       	ldi	r21, 0x01	; 1
    26f0:	b9 01       	movw	r22, r18
    26f2:	26 e4       	ldi	r18, 0x46	; 70
    26f4:	0e 94 3c 07 	call	0xe78	; 0xe78 <F_compare>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	a8 ec       	ldi	r26, 0xC8	; 200
    26fe:	b2 e4       	ldi	r27, 0x42	; 66
    2700:	8b 87       	std	Y+11, r24	; 0x0b
    2702:	9c 87       	std	Y+12, r25	; 0x0c
    2704:	ad 87       	std	Y+13, r26	; 0x0d
    2706:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2708:	6b 85       	ldd	r22, Y+11	; 0x0b
    270a:	7c 85       	ldd	r23, Y+12	; 0x0c
    270c:	8d 85       	ldd	r24, Y+13	; 0x0d
    270e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	4a e7       	ldi	r20, 0x7A	; 122
    2716:	53 e4       	ldi	r21, 0x43	; 67
    2718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	8f 83       	std	Y+7, r24	; 0x07
    2722:	98 87       	std	Y+8, r25	; 0x08
    2724:	a9 87       	std	Y+9, r26	; 0x09
    2726:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2728:	6f 81       	ldd	r22, Y+7	; 0x07
    272a:	78 85       	ldd	r23, Y+8	; 0x08
    272c:	89 85       	ldd	r24, Y+9	; 0x09
    272e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e8       	ldi	r20, 0x80	; 128
    2736:	5f e3       	ldi	r21, 0x3F	; 63
    2738:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    273c:	88 23       	and	r24, r24
    273e:	2c f4       	brge	.+10     	; 0x274a <main+0x8c0>
		__ticks = 1;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9e 83       	std	Y+6, r25	; 0x06
    2746:	8d 83       	std	Y+5, r24	; 0x05
    2748:	3f c0       	rjmp	.+126    	; 0x27c8 <main+0x93e>
	else if (__tmp > 65535)
    274a:	6f 81       	ldd	r22, Y+7	; 0x07
    274c:	78 85       	ldd	r23, Y+8	; 0x08
    274e:	89 85       	ldd	r24, Y+9	; 0x09
    2750:	9a 85       	ldd	r25, Y+10	; 0x0a
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	3f ef       	ldi	r19, 0xFF	; 255
    2756:	4f e7       	ldi	r20, 0x7F	; 127
    2758:	57 e4       	ldi	r21, 0x47	; 71
    275a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    275e:	18 16       	cp	r1, r24
    2760:	4c f5       	brge	.+82     	; 0x27b4 <main+0x92a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2762:	6b 85       	ldd	r22, Y+11	; 0x0b
    2764:	7c 85       	ldd	r23, Y+12	; 0x0c
    2766:	8d 85       	ldd	r24, Y+13	; 0x0d
    2768:	9e 85       	ldd	r25, Y+14	; 0x0e
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e2       	ldi	r20, 0x20	; 32
    2770:	51 e4       	ldi	r21, 0x41	; 65
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	bc 01       	movw	r22, r24
    277c:	cd 01       	movw	r24, r26
    277e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	9e 83       	std	Y+6, r25	; 0x06
    2788:	8d 83       	std	Y+5, r24	; 0x05
    278a:	0f c0       	rjmp	.+30     	; 0x27aa <main+0x920>
    278c:	89 e1       	ldi	r24, 0x19	; 25
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9c 83       	std	Y+4, r25	; 0x04
    2792:	8b 83       	std	Y+3, r24	; 0x03
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	9c 81       	ldd	r25, Y+4	; 0x04
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <main+0x90e>
    279c:	9c 83       	std	Y+4, r25	; 0x04
    279e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	9e 83       	std	Y+6, r25	; 0x06
    27a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	9e 81       	ldd	r25, Y+6	; 0x06
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	69 f7       	brne	.-38     	; 0x278c <main+0x902>
    27b2:	14 c0       	rjmp	.+40     	; 0x27dc <main+0x952>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b4:	6f 81       	ldd	r22, Y+7	; 0x07
    27b6:	78 85       	ldd	r23, Y+8	; 0x08
    27b8:	89 85       	ldd	r24, Y+9	; 0x09
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9e 83       	std	Y+6, r25	; 0x06
    27c6:	8d 83       	std	Y+5, r24	; 0x05
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ca:	9e 81       	ldd	r25, Y+6	; 0x06
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	9a 81       	ldd	r25, Y+2	; 0x02
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <main+0x94a>
    27d8:	9a 83       	std	Y+2, r25	; 0x02
    27da:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);

			LCD_sendCommand(CLEAR_COMMAND);
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
			LCD_displayStringRowColumn(0,0,"DOOR OPENING");
    27e2:	20 e5       	ldi	r18, 0x50	; 80
    27e4:	31 e0       	ldi	r19, 0x01	; 1
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	a9 01       	movw	r20, r18
    27ec:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_displayStringRowColumn>
			timer0_init_normal_mode(clk_1024, 5);
    27f0:	85 e0       	ldi	r24, 0x05	; 5
    27f2:	65 e0       	ldi	r22, 0x05	; 5
    27f4:	0e 94 28 09 	call	0x1250	; 0x1250 <timer0_init_normal_mode>
			while (second != 2);
    27f8:	80 91 73 01 	lds	r24, 0x0173
    27fc:	82 30       	cpi	r24, 0x02	; 2
    27fe:	e1 f7       	brne	.-8      	; 0x27f8 <main+0x96e>
			second = 0;
    2800:	10 92 73 01 	sts	0x0173, r1

			LCD_sendCommand(CLEAR_COMMAND);
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>

			LCD_displayStringRowColumn(0,0,"DOOR CLOSING");
    280a:	2d e5       	ldi	r18, 0x5D	; 93
    280c:	31 e0       	ldi	r19, 0x01	; 1
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	a9 01       	movw	r20, r18
    2814:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_displayStringRowColumn>
			while (second != 2);
    2818:	80 91 73 01 	lds	r24, 0x0173
    281c:	82 30       	cpi	r24, 0x02	; 2
    281e:	e1 f7       	brne	.-8      	; 0x2818 <main+0x98e>
			second = 0;
    2820:	10 92 73 01 	sts	0x0173, r1
		}
		LCD_sendCommand(CLEAR_COMMAND);
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_sendCommand>
    282a:	19 cc       	rjmp	.-1998   	; 0x205e <main+0x1d4>

0000282c <UART_init>:
 *      Author: rahma
 */

#include "uart.h"
#define BAUD_PRESCALE (((F_CPU / (Baud_Rate * 8UL))) - 1)
void UART_init(){
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
	UCSRA|=(1<<U2X);           //for double transmission rate
    2834:	ab e2       	ldi	r26, 0x2B	; 43
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	eb e2       	ldi	r30, 0x2B	; 43
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	82 60       	ori	r24, 0x02	; 2
    2840:	8c 93       	st	X, r24
	UCSRB |=(1<<TXEN)|(1<<RXEN);           // transmitter and receiver enable
    2842:	aa e2       	ldi	r26, 0x2A	; 42
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	ea e2       	ldi	r30, 0x2A	; 42
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	88 61       	ori	r24, 0x18	; 24
    284e:	8c 93       	st	X, r24
	UCSRC|= (1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);         // UCSZ1 & UCSZ0 is 0 and UCSZ2 is 1 for8 bit mode and URSEL must be one for writing in UCSRC and URSEL is 0 for Asynchronous mode
    2850:	a0 e4       	ldi	r26, 0x40	; 64
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	e0 e4       	ldi	r30, 0x40	; 64
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	86 68       	ori	r24, 0x86	; 134
    285c:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    285e:	e0 e4       	ldi	r30, 0x40	; 64
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2864:	e9 e2       	ldi	r30, 0x29	; 41
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	8c e0       	ldi	r24, 0x0C	; 12
    286a:	80 83       	st	Z, r24
}
    286c:	cf 91       	pop	r28
    286e:	df 91       	pop	r29
    2870:	08 95       	ret

00002872 <UART_sendByte>:
void UART_sendByte(const uint8 data){
    2872:	df 93       	push	r29
    2874:	cf 93       	push	r28
    2876:	0f 92       	push	r0
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	89 83       	std	Y+1, r24	; 0x01
while  BIT_IS_CLEAR(UCSRA,UDRE); //polling until UDRE is set to one means that UDR is empty and ready for transmitting
    287e:	eb e2       	ldi	r30, 0x2B	; 43
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	88 2f       	mov	r24, r24
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	80 72       	andi	r24, 0x20	; 32
    288a:	90 70       	andi	r25, 0x00	; 0
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	b9 f3       	breq	.-18     	; 0x287e <UART_sendByte+0xc>
UDR =data; // Data is stored in UDR and its now not empty make the UDRE cleared
    2890:	ec e2       	ldi	r30, 0x2C	; 44
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	80 83       	st	Z, r24

}
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <UART_recieveByte>:
uint8 UART_recieveByte(){
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
	while BIT_IS_CLEAR(UCSRA,RXC); //polling until receive complete , as RXC is set one when recieve complete
    28a8:	eb e2       	ldi	r30, 0x2B	; 43
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	88 23       	and	r24, r24
    28b0:	dc f7       	brge	.-10     	; 0x28a8 <UART_recieveByte+0x8>
	return UDR; // read UART after receiving from UDR and the RXC flag  will be cleared after read this data
    28b2:	ec e2       	ldi	r30, 0x2C	; 44
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
}
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <UART_sendString>:
void UART_sendString(const uint8*Str){
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <UART_sendString+0x6>
    28c4:	00 d0       	rcall	.+0      	; 0x28c6 <UART_sendString+0x8>
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	9c 83       	std	Y+4, r25	; 0x04
    28cc:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    28ce:	1a 82       	std	Y+2, r1	; 0x02
    28d0:	19 82       	std	Y+1, r1	; 0x01
    28d2:	0f c0       	rjmp	.+30     	; 0x28f2 <UART_sendString+0x34>
	while (Str[i]!='\0'){
		UART_sendByte(Str[i]);
    28d4:	29 81       	ldd	r18, Y+1	; 0x01
    28d6:	3a 81       	ldd	r19, Y+2	; 0x02
    28d8:	8b 81       	ldd	r24, Y+3	; 0x03
    28da:	9c 81       	ldd	r25, Y+4	; 0x04
    28dc:	fc 01       	movw	r30, r24
    28de:	e2 0f       	add	r30, r18
    28e0:	f3 1f       	adc	r31, r19
    28e2:	80 81       	ld	r24, Z
    28e4:	0e 94 39 14 	call	0x2872	; 0x2872 <UART_sendByte>
		i++;
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	9a 81       	ldd	r25, Y+2	; 0x02
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	9a 83       	std	Y+2, r25	; 0x02
    28f0:	89 83       	std	Y+1, r24	; 0x01
	while BIT_IS_CLEAR(UCSRA,RXC); //polling until receive complete , as RXC is set one when recieve complete
	return UDR; // read UART after receiving from UDR and the RXC flag  will be cleared after read this data
}
void UART_sendString(const uint8*Str){
	int i=0;
	while (Str[i]!='\0'){
    28f2:	29 81       	ldd	r18, Y+1	; 0x01
    28f4:	3a 81       	ldd	r19, Y+2	; 0x02
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	fc 01       	movw	r30, r24
    28fc:	e2 0f       	add	r30, r18
    28fe:	f3 1f       	adc	r31, r19
    2900:	80 81       	ld	r24, Z
    2902:	88 23       	and	r24, r24
    2904:	39 f7       	brne	.-50     	; 0x28d4 <UART_sendString+0x16>
		UART_sendByte(Str[i]);
		i++;
	}
}
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <UART_recieveString>:
void UART_recieveString(uint8*Str){
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	00 d0       	rcall	.+0      	; 0x291e <UART_recieveString+0xa>
    291e:	0f 92       	push	r0
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	9b 83       	std	Y+3, r25	; 0x03
    2926:	8a 83       	std	Y+2, r24	; 0x02

uint8 i = 0;
    2928:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	8a 81       	ldd	r24, Y+2	; 0x02
    2932:	9b 81       	ldd	r25, Y+3	; 0x03
    2934:	8c 01       	movw	r16, r24
    2936:	02 0f       	add	r16, r18
    2938:	13 1f       	adc	r17, r19
    293a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <UART_recieveByte>
    293e:	f8 01       	movw	r30, r16
    2940:	80 83       	st	Z, r24
    2942:	0f c0       	rjmp	.+30     	; 0x2962 <UART_recieveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	8f 5f       	subi	r24, 0xFF	; 255
    2948:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	9b 81       	ldd	r25, Y+3	; 0x03
    2954:	8c 01       	movw	r16, r24
    2956:	02 0f       	add	r16, r18
    2958:	13 1f       	adc	r17, r19
    295a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <UART_recieveByte>
    295e:	f8 01       	movw	r30, r16
    2960:	80 83       	st	Z, r24
}
void UART_recieveString(uint8*Str){

uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	28 2f       	mov	r18, r24
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	9b 81       	ldd	r25, Y+3	; 0x03
    296c:	fc 01       	movw	r30, r24
    296e:	e2 0f       	add	r30, r18
    2970:	f3 1f       	adc	r31, r19
    2972:	80 81       	ld	r24, Z
    2974:	83 32       	cpi	r24, 0x23	; 35
    2976:	31 f7       	brne	.-52     	; 0x2944 <UART_recieveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';}
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	28 2f       	mov	r18, r24
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	9b 81       	ldd	r25, Y+3	; 0x03
    2982:	fc 01       	movw	r30, r24
    2984:	e2 0f       	add	r30, r18
    2986:	f3 1f       	adc	r31, r19
    2988:	10 82       	st	Z, r1
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	08 95       	ret

0000299a <__prologue_saves__>:
    299a:	2f 92       	push	r2
    299c:	3f 92       	push	r3
    299e:	4f 92       	push	r4
    29a0:	5f 92       	push	r5
    29a2:	6f 92       	push	r6
    29a4:	7f 92       	push	r7
    29a6:	8f 92       	push	r8
    29a8:	9f 92       	push	r9
    29aa:	af 92       	push	r10
    29ac:	bf 92       	push	r11
    29ae:	cf 92       	push	r12
    29b0:	df 92       	push	r13
    29b2:	ef 92       	push	r14
    29b4:	ff 92       	push	r15
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	ca 1b       	sub	r28, r26
    29c4:	db 0b       	sbc	r29, r27
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	09 94       	ijmp

000029d2 <__epilogue_restores__>:
    29d2:	2a 88       	ldd	r2, Y+18	; 0x12
    29d4:	39 88       	ldd	r3, Y+17	; 0x11
    29d6:	48 88       	ldd	r4, Y+16	; 0x10
    29d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    29da:	6e 84       	ldd	r6, Y+14	; 0x0e
    29dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    29de:	8c 84       	ldd	r8, Y+12	; 0x0c
    29e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    29e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    29e4:	b9 84       	ldd	r11, Y+9	; 0x09
    29e6:	c8 84       	ldd	r12, Y+8	; 0x08
    29e8:	df 80       	ldd	r13, Y+7	; 0x07
    29ea:	ee 80       	ldd	r14, Y+6	; 0x06
    29ec:	fd 80       	ldd	r15, Y+5	; 0x05
    29ee:	0c 81       	ldd	r16, Y+4	; 0x04
    29f0:	1b 81       	ldd	r17, Y+3	; 0x03
    29f2:	aa 81       	ldd	r26, Y+2	; 0x02
    29f4:	b9 81       	ldd	r27, Y+1	; 0x01
    29f6:	ce 0f       	add	r28, r30
    29f8:	d1 1d       	adc	r29, r1
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	ed 01       	movw	r28, r26
    2a06:	08 95       	ret

00002a08 <itoa>:
    2a08:	fb 01       	movw	r30, r22
    2a0a:	9f 01       	movw	r18, r30
    2a0c:	e8 94       	clt
    2a0e:	42 30       	cpi	r20, 0x02	; 2
    2a10:	c4 f0       	brlt	.+48     	; 0x2a42 <itoa+0x3a>
    2a12:	45 32       	cpi	r20, 0x25	; 37
    2a14:	b4 f4       	brge	.+44     	; 0x2a42 <itoa+0x3a>
    2a16:	4a 30       	cpi	r20, 0x0A	; 10
    2a18:	29 f4       	brne	.+10     	; 0x2a24 <itoa+0x1c>
    2a1a:	97 fb       	bst	r25, 7
    2a1c:	1e f4       	brtc	.+6      	; 0x2a24 <itoa+0x1c>
    2a1e:	90 95       	com	r25
    2a20:	81 95       	neg	r24
    2a22:	9f 4f       	sbci	r25, 0xFF	; 255
    2a24:	64 2f       	mov	r22, r20
    2a26:	77 27       	eor	r23, r23
    2a28:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__udivmodhi4>
    2a2c:	80 5d       	subi	r24, 0xD0	; 208
    2a2e:	8a 33       	cpi	r24, 0x3A	; 58
    2a30:	0c f0       	brlt	.+2      	; 0x2a34 <itoa+0x2c>
    2a32:	89 5d       	subi	r24, 0xD9	; 217
    2a34:	81 93       	st	Z+, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	00 97       	sbiw	r24, 0x00	; 0
    2a3a:	a1 f7       	brne	.-24     	; 0x2a24 <itoa+0x1c>
    2a3c:	16 f4       	brtc	.+4      	; 0x2a42 <itoa+0x3a>
    2a3e:	5d e2       	ldi	r21, 0x2D	; 45
    2a40:	51 93       	st	Z+, r21
    2a42:	10 82       	st	Z, r1
    2a44:	c9 01       	movw	r24, r18
    2a46:	0c 94 25 15 	jmp	0x2a4a	; 0x2a4a <strrev>

00002a4a <strrev>:
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	67 2f       	mov	r22, r23
    2a50:	71 91       	ld	r23, Z+
    2a52:	77 23       	and	r23, r23
    2a54:	e1 f7       	brne	.-8      	; 0x2a4e <strrev+0x4>
    2a56:	32 97       	sbiw	r30, 0x02	; 2
    2a58:	04 c0       	rjmp	.+8      	; 0x2a62 <strrev+0x18>
    2a5a:	7c 91       	ld	r23, X
    2a5c:	6d 93       	st	X+, r22
    2a5e:	70 83       	st	Z, r23
    2a60:	62 91       	ld	r22, -Z
    2a62:	ae 17       	cp	r26, r30
    2a64:	bf 07       	cpc	r27, r31
    2a66:	c8 f3       	brcs	.-14     	; 0x2a5a <strrev+0x10>
    2a68:	08 95       	ret

00002a6a <__udivmodhi4>:
    2a6a:	aa 1b       	sub	r26, r26
    2a6c:	bb 1b       	sub	r27, r27
    2a6e:	51 e1       	ldi	r21, 0x11	; 17
    2a70:	07 c0       	rjmp	.+14     	; 0x2a80 <__udivmodhi4_ep>

00002a72 <__udivmodhi4_loop>:
    2a72:	aa 1f       	adc	r26, r26
    2a74:	bb 1f       	adc	r27, r27
    2a76:	a6 17       	cp	r26, r22
    2a78:	b7 07       	cpc	r27, r23
    2a7a:	10 f0       	brcs	.+4      	; 0x2a80 <__udivmodhi4_ep>
    2a7c:	a6 1b       	sub	r26, r22
    2a7e:	b7 0b       	sbc	r27, r23

00002a80 <__udivmodhi4_ep>:
    2a80:	88 1f       	adc	r24, r24
    2a82:	99 1f       	adc	r25, r25
    2a84:	5a 95       	dec	r21
    2a86:	a9 f7       	brne	.-22     	; 0x2a72 <__udivmodhi4_loop>
    2a88:	80 95       	com	r24
    2a8a:	90 95       	com	r25
    2a8c:	bc 01       	movw	r22, r24
    2a8e:	cd 01       	movw	r24, r26
    2a90:	08 95       	ret

00002a92 <_exit>:
    2a92:	f8 94       	cli

00002a94 <__stop_program>:
    2a94:	ff cf       	rjmp	.-2      	; 0x2a94 <__stop_program>
